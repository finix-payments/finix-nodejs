"use strict";
/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateTransferRequest = void 0;
/**
* Create a `transfer`.
*/
class CreateTransferRequest {
    static getAttributeTypeMap() {
        return CreateTransferRequest.attributeTypeMap;
    }
}
exports.CreateTransferRequest = CreateTransferRequest;
CreateTransferRequest.discriminator = undefined;
CreateTransferRequest.attributeTypeMap = [
    {
        "name": "tags",
        "baseName": "tags",
        "type": "{ [key: string]: string; }"
    },
    {
        "name": "adjustmentRequest",
        "baseName": "adjustment_request",
        "type": "boolean"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "number"
    },
    {
        "name": "configOverride",
        "baseName": "config_override",
        "type": "{ [key: string]: string; }"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "Currency"
    },
    {
        "name": "destination",
        "baseName": "destination",
        "type": "string"
    },
    {
        "name": "device",
        "baseName": "device",
        "type": "string"
    },
    {
        "name": "deviceConfiguration",
        "baseName": "device_configuration",
        "type": "ConfigurationDetails"
    },
    {
        "name": "fee",
        "baseName": "fee",
        "type": "number"
    },
    {
        "name": "gateway",
        "baseName": "gateway",
        "type": "CreateTransferRequest.GatewayEnum"
    },
    {
        "name": "_3dSecureAuthentication",
        "baseName": "3d_secure_authentication",
        "type": "CreateAuthorizationRequest3dSecureAuthentication"
    },
    {
        "name": "idempotencyId",
        "baseName": "idempotency_id",
        "type": "string"
    },
    {
        "name": "inputMethod",
        "baseName": "input_method",
        "type": "CreateTransferRequest.InputMethodEnum"
    },
    {
        "name": "merchant",
        "baseName": "merchant",
        "type": "string"
    },
    {
        "name": "merchantIdentity",
        "baseName": "merchant_identity",
        "type": "string"
    },
    {
        "name": "operationKey",
        "baseName": "operation_key",
        "type": "CreateTransferRequest.OperationKeyEnum"
    },
    {
        "name": "paymentInstrument",
        "baseName": "payment_instrument",
        "type": "CardPresentInstrumentForm"
    },
    {
        "name": "processor",
        "baseName": "processor",
        "type": "string"
    },
    {
        "name": "source",
        "baseName": "source",
        "type": "string"
    },
    {
        "name": "statementDescriptor",
        "baseName": "statement_descriptor",
        "type": "string"
    },
    {
        "name": "fraudSessionId",
        "baseName": "fraud_session_id",
        "type": "string"
    },
    {
        "name": "additionalPurchaseData",
        "baseName": "additional_purchase_data",
        "type": "AdditionalPurchaseData"
    }
];
(function (CreateTransferRequest) {
    let GatewayEnum;
    (function (GatewayEnum) {
        GatewayEnum[GatewayEnum["CloudV1"] = 'TRIPOS_CLOUD_V1'] = "CloudV1";
        GatewayEnum[GatewayEnum["MobileV1"] = 'TRIPOS_MOBILE_V1'] = "MobileV1";
    })(GatewayEnum = CreateTransferRequest.GatewayEnum || (CreateTransferRequest.GatewayEnum = {}));
    let InputMethodEnum;
    (function (InputMethodEnum) {
        InputMethodEnum[InputMethodEnum["Unknown"] = 'UNKNOWN'] = "Unknown";
        InputMethodEnum[InputMethodEnum["Swiped"] = 'SWIPED'] = "Swiped";
        InputMethodEnum[InputMethodEnum["ManualKeyEntry"] = 'MANUAL_KEY_ENTRY'] = "ManualKeyEntry";
        InputMethodEnum[InputMethodEnum["ContactlessMsd"] = 'CONTACTLESS_MSD'] = "ContactlessMsd";
        InputMethodEnum[InputMethodEnum["ContactlessEmv"] = 'CONTACTLESS_EMV'] = "ContactlessEmv";
        InputMethodEnum[InputMethodEnum["SwipedFallback"] = 'SWIPED_FALLBACK'] = "SwipedFallback";
        InputMethodEnum[InputMethodEnum["KeyedFallback"] = 'KEYED_FALLBACK'] = "KeyedFallback";
        InputMethodEnum[InputMethodEnum["Contactless"] = 'CONTACTLESS'] = "Contactless";
        InputMethodEnum[InputMethodEnum["DigitalWallet"] = 'DIGITAL_WALLET'] = "DigitalWallet";
        InputMethodEnum[InputMethodEnum["ChipEntry"] = 'CHIP_ENTRY'] = "ChipEntry";
    })(InputMethodEnum = CreateTransferRequest.InputMethodEnum || (CreateTransferRequest.InputMethodEnum = {}));
    let OperationKeyEnum;
    (function (OperationKeyEnum) {
        OperationKeyEnum[OperationKeyEnum["PushToCard"] = 'PUSH_TO_CARD'] = "PushToCard";
        OperationKeyEnum[OperationKeyEnum["PullFromCard"] = 'PULL_FROM_CARD'] = "PullFromCard";
        OperationKeyEnum[OperationKeyEnum["CardPresentDebit"] = 'CARD_PRESENT_DEBIT'] = "CardPresentDebit";
        OperationKeyEnum[OperationKeyEnum["CardPresentUnreferencedRefund"] = 'CARD_PRESENT_UNREFERENCED_REFUND'] = "CardPresentUnreferencedRefund";
        OperationKeyEnum[OperationKeyEnum["Sale"] = 'SALE'] = "Sale";
        OperationKeyEnum[OperationKeyEnum["UnreferencedRefund"] = 'UNREFERENCED_REFUND'] = "UnreferencedRefund";
        OperationKeyEnum[OperationKeyEnum["MerchantCreditAdjustment"] = 'MERCHANT_CREDIT_ADJUSTMENT'] = "MerchantCreditAdjustment";
        OperationKeyEnum[OperationKeyEnum["MerchantDebitAdjustment"] = 'MERCHANT_DEBIT_ADJUSTMENT'] = "MerchantDebitAdjustment";
    })(OperationKeyEnum = CreateTransferRequest.OperationKeyEnum || (CreateTransferRequest.OperationKeyEnum = {}));
})(CreateTransferRequest = exports.CreateTransferRequest || (exports.CreateTransferRequest = {}));
//# sourceMappingURL=createTransferRequest.js.map