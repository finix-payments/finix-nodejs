"use strict";
/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authorization = void 0;
/**
* A charge authorization
*/
class Authorization {
    /**
    * Key value pair for annotating custom meta data (e.g. order numbers).
    */
    'tags';
    /**
    * The ID of the `Authorization` resource.
    */
    'id';
    /**
    * Timestamp of when the object was created.
    */
    'createdAt';
    /**
    * Timestamp of when the object was last updated.
    */
    'updatedAt';
    /**
    * The redirect URL used for 3DS transactions (if supported by the processor).
    */
    '_3dsRedirectUrl';
    /**
    * The total amount that will be debited in cents (e.g. 100 cents to debit $1.00).
    */
    'amount';
    /**
    * The ID of the `Application` resource the `Authorization` was created under.
    */
    'application';
    'cardPresentDetails';
    /**
    * The amount of the  `Authorization`  you would like to capture in cents. Must be less than or equal to the `amount` of the `Authorization`.
    */
    'captureAmount';
    'currency';
    /**
    * The ID of the activated device.
    */
    'device';
    /**
    * Authorization expiration time.
    */
    'expiresAt';
    'externalResponses';
    /**
    * A randomly generated value that\'ll be associated with the request.
    */
    'idempotencyId';
    /**
    * The code of the failure so the decline can be handled programmatically. For more info on how to handle the failure, see [Failure Codes](/docs/guides/developers/errors/#failure-codes).
    */
    'failureCode';
    /**
    * A human-readable description of why the transaction was declined. This will also include a suggestion on how to complete the payment.
    */
    'failureMessage';
    /**
    * Details if the `Authorization` is void.
    */
    'isVoid';
    /**
    * The ID of the resource.
    */
    'merchantIdentity';
    /**
    * The ID of the resource.
    */
    'merchant';
    /**
    * Message field that provides additional details. This field is typically **null**.
    */
    'messages';
    /**
    * Raw response from the processor
    */
    'raw';
    /**
    * ID of the `Payment Instrument` where funds get debited.
    */
    'source';
    /**
    * The state of the `Authorization`.
    */
    'state';
    /**
    * Trace ID of the `Authorization`. The processor sends back the `trace_id` so you can track the authorization end-to-end.
    */
    'traceId';
    /**
    * The ID of the `transfer` resource that gets created when the `Authorization` moves to **SUCCEEDED**.
    */
    'transfer';
    /**
    * Details if the `Authorization` has been voided.
    */
    'voidState';
    'subType';
    'links';
    static discriminator = undefined;
    static attributeTypeMap = [
        {
            "name": "tags",
            "baseName": "tags",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "_3dsRedirectUrl",
            "baseName": "3ds_redirect_url",
            "type": "string"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "application",
            "baseName": "application",
            "type": "string"
        },
        {
            "name": "cardPresentDetails",
            "baseName": "card_present_details",
            "type": "CardPresentDetails"
        },
        {
            "name": "captureAmount",
            "baseName": "capture_amount",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "Currency"
        },
        {
            "name": "device",
            "baseName": "device",
            "type": "string"
        },
        {
            "name": "expiresAt",
            "baseName": "expires_at",
            "type": "Date"
        },
        {
            "name": "externalResponses",
            "baseName": "external_responses",
            "type": "Array<AuthorizationExternalResponsesInner>"
        },
        {
            "name": "idempotencyId",
            "baseName": "idempotency_id",
            "type": "string"
        },
        {
            "name": "failureCode",
            "baseName": "failure_code",
            "type": "string"
        },
        {
            "name": "failureMessage",
            "baseName": "failure_message",
            "type": "string"
        },
        {
            "name": "isVoid",
            "baseName": "is_void",
            "type": "boolean"
        },
        {
            "name": "merchantIdentity",
            "baseName": "merchant_identity",
            "type": "string"
        },
        {
            "name": "merchant",
            "baseName": "merchant",
            "type": "string"
        },
        {
            "name": "messages",
            "baseName": "messages",
            "type": "Array<string>"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "object"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "Authorization.StateEnum"
        },
        {
            "name": "traceId",
            "baseName": "trace_id",
            "type": "string"
        },
        {
            "name": "transfer",
            "baseName": "transfer",
            "type": "string"
        },
        {
            "name": "voidState",
            "baseName": "void_state",
            "type": "string"
        },
        {
            "name": "subType",
            "baseName": "sub_type",
            "type": "SubTypeTransfer"
        },
        {
            "name": "links",
            "baseName": "_links",
            "type": "AuthorizationLinks"
        }
    ];
    static getAttributeTypeMap() {
        return Authorization.attributeTypeMap;
    }
}
exports.Authorization = Authorization;
(function (Authorization) {
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["Canceled"] = 'CANCELED'] = "Canceled";
        StateEnum[StateEnum["Pending"] = 'PENDING'] = "Pending";
        StateEnum[StateEnum["Failed"] = 'FAILED'] = "Failed";
        StateEnum[StateEnum["Succeeded"] = 'SUCCEEDED'] = "Succeeded";
        StateEnum[StateEnum["Unknown"] = 'UNKNOWN'] = "Unknown";
    })(StateEnum = Authorization.StateEnum || (Authorization.StateEnum = {}));
})(Authorization = exports.Authorization || (exports.Authorization = {}));
//# sourceMappingURL=authorization.js.map