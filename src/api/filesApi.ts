/**
 * Finix API
 */


import localVarRequest from 'request';
import * as http from 'http';
// @ts-ignore: Some endpoints interact with files
import * as fs from 'fs';
/* tslint:disable:no-unused-locals */
// @ts-ignore: Some unused imports always provided
import { CreateExternalLinkRequest } from '../model/createExternalLinkRequest';
// @ts-ignore: Some unused imports always provided
import { CreateFileRequest } from '../model/createFileRequest';
// @ts-ignore: Some unused imports always provided
import { Error401Unauthorized } from '../model/error401Unauthorized';
// @ts-ignore: Some unused imports always provided
import { Error403ForbiddenList } from '../model/error403ForbiddenList';
// @ts-ignore: Some unused imports always provided
import { Error404NotFoundList } from '../model/error404NotFoundList';
// @ts-ignore: Some unused imports always provided
import { Error406NotAcceptable } from '../model/error406NotAcceptable';
// @ts-ignore: Some unused imports always provided
import { ExternalLink } from '../model/externalLink';
// @ts-ignore: Some unused imports always provided
import { ExternalLinksList } from '../model/externalLinksList';
// @ts-ignore: Some unused imports always provided
import { FilesList } from '../model/filesList';
// @ts-ignore: Some unused imports always provided
import { ModelFile } from '../model/modelFile';
// @ts-ignore: Some unused imports always provided
import { UploadFileRequest } from '../model/uploadFileRequest';
import { ListExternalLinksQueryParams } from '../model/listExternalLinksQueryParams';
import { ListFilesQueryParams } from '../model/listFilesQueryParams';
import { ObjectSerializer, Authentication, VoidAuth, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';

import { HttpError } from './apis';

let defaultBasePath = 'https://finix.sandbox-payments-api.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum FilesApiApiKeys {
}

export class FilesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'BasicAuth': new HttpBasicAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: FilesApiApiKeys, value: string) {
        (this.authentications as any)[FilesApiApiKeys[key]].apiKey = value;
    }

    set username(username: string) {
        this.authentications.BasicAuth.username = username;
    }

    set password(password: string) {
        this.authentications.BasicAuth.password = password;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Helper function. 
     * Create an `external_link` resource to share with users so they can upload files directly from their browser. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/).
     * @summary Create an External Link
     * @param fileId Your &#x60;File&#x60; ID.
     * @param createExternalLinkRequest 
     */

    private async createExternalLinkHelper(fileId: string, createExternalLinkRequest?: CreateExternalLinkRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ExternalLink;  rawBody: any; }> {
        const localVarPath = this.basePath + '/files/{file_id}/external_links'
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/vnd.api+json', 'application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling createExternalLink.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        localVarHeaderParams['Content-Type'] = "application/vnd.api+json";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (createExternalLinkRequest && createExternalLinkRequest.hasOwnProperty('file')){
        //if (createExternalLinkRequest != undefined && createExternalLinkRequest != null && createExternalLinkRequest.hasOwnProperty('file')){
            localVarRequestOptions.formData = createExternalLinkRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(createExternalLinkRequest, "CreateExternalLinkRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ExternalLink;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "ExternalLink");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Create an `external_link` resource to share with users so they can upload files directly from their browser. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/).
     * @summary Create an External Link
     * @param fileId Your &#x60;File&#x60; ID.
     * @param createExternalLinkRequest 
     */
    public async createExternalLink(fileId: string, createExternalLinkRequest?: CreateExternalLinkRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<ExternalLink> {
        const responseObject = await this.createExternalLinkHelper(fileId, createExternalLinkRequest,  options);
        return responseObject.body;
    }

    /**
     * Create an `external_link` resource to share with users so they can upload files directly from their browser. For more info, see [Uploading files to Finix](/guides/onboarding/uploading-files-to-finix/).
     * @summary Create an External Link
     * @param fileId Your &#x60;File&#x60; ID.
     * @param createExternalLinkRequest 
     */
    public async createExternalLinkHttp(fileId: string, createExternalLinkRequest?: CreateExternalLinkRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: ExternalLink;  rawBody: any;}> {
        const responseObject = await this.createExternalLinkHelper(fileId, createExternalLinkRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Before uploading a file, you need to create a `File` resource.   Once created, you can [upload](/guides/onboarding/uploading-files-to-finix/#how-to-upload-a-file-to-finix) your file to the new `File` resource.
     * @summary Create a File
     * @param createFileRequest 
     */

    private async createHelper(createFileRequest?: CreateFileRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ModelFile;  rawBody: any; }> {
        const localVarPath = this.basePath + '/files';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/vnd.api+json', 'application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};


        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        localVarHeaderParams['Content-Type'] = "application/vnd.api+json";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (createFileRequest && createFileRequest.hasOwnProperty('file')){
        //if (createFileRequest != undefined && createFileRequest != null && createFileRequest.hasOwnProperty('file')){
            localVarRequestOptions.formData = createFileRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(createFileRequest, "CreateFileRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ModelFile;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "ModelFile");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Before uploading a file, you need to create a `File` resource.   Once created, you can [upload](/guides/onboarding/uploading-files-to-finix/#how-to-upload-a-file-to-finix) your file to the new `File` resource.
     * @summary Create a File
     * @param createFileRequest 
     */
    public async create(createFileRequest?: CreateFileRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<ModelFile> {
        const responseObject = await this.createHelper(createFileRequest,  options);
        return responseObject.body;
    }

    /**
     * Before uploading a file, you need to create a `File` resource.   Once created, you can [upload](/guides/onboarding/uploading-files-to-finix/#how-to-upload-a-file-to-finix) your file to the new `File` resource.
     * @summary Create a File
     * @param createFileRequest 
     */
    public async createHttp(createFileRequest?: CreateFileRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: ModelFile;  rawBody: any;}> {
        const responseObject = await this.createHelper(createFileRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Download a file that was uploaded to a `File` resource.
     * @summary Download a file
     * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file.
     */

    private async downloadHelper(fileId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Buffer;  rawBody: any; }> {
        const localVarPath = this.basePath + '/files/{file_id}/download'
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/octet-stream', 'application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling downloadFile.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Buffer;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "Buffer");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Download a file that was uploaded to a `File` resource.
     * @summary Download a file
     * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file.
     */
    public async download(fileId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Buffer> {
        const responseObject = await this.downloadHelper(fileId,  options);
        return responseObject.body;
    }

    /**
     * Download a file that was uploaded to a `File` resource.
     * @summary Download a file
     * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file.
     */
    public async downloadHttp(fileId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Buffer;  rawBody: any;}> {
        const responseObject = await this.downloadHelper(fileId,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Fetch a previously created `external_link` resource.
     * @summary Fetch an External LInk
     * @param fileId The ID of the &#x60;File&#x60; that has the links you want to retrieve.
     * @param externalLinkId The ID of the &#x60;external_link&#x60; that you want to retireve.
     */

    private async getExternalLinkHelper(fileId: string, externalLinkId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ExternalLink;  rawBody: any; }> {
        const localVarPath = this.basePath + '/files/{file_id}/external_links/{external_link_id}'
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)))
            .replace('{' + 'external_link_id' + '}', encodeURIComponent(String(externalLinkId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/vnd.api+json', 'application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling getExternalLink.');
        }
        // verify required parameter 'externalLinkId' is not null or undefined
        if (externalLinkId === null || externalLinkId === undefined) {
            throw new Error('Required parameter externalLinkId was null or undefined when calling getExternalLink.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ExternalLink;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "ExternalLink");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Fetch a previously created `external_link` resource.
     * @summary Fetch an External LInk
     * @param fileId The ID of the &#x60;File&#x60; that has the links you want to retrieve.
     * @param externalLinkId The ID of the &#x60;external_link&#x60; that you want to retireve.
     */
    public async getExternalLink(fileId: string, externalLinkId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<ExternalLink> {
        const responseObject = await this.getExternalLinkHelper(fileId, externalLinkId,  options);
        return responseObject.body;
    }

    /**
     * Fetch a previously created `external_link` resource.
     * @summary Fetch an External LInk
     * @param fileId The ID of the &#x60;File&#x60; that has the links you want to retrieve.
     * @param externalLinkId The ID of the &#x60;external_link&#x60; that you want to retireve.
     */
    public async getExternalLinkHttp(fileId: string, externalLinkId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: ExternalLink;  rawBody: any;}> {
        const responseObject = await this.getExternalLinkHelper(fileId, externalLinkId,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Retrieve the details of a `File` resource.
     * @summary Fetch a File
     * @param fileId Your &#x60;File&#x60; ID.
     */

    private async getHelper(fileId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ModelFile;  rawBody: any; }> {
        const localVarPath = this.basePath + '/files/{file_id}'
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/vnd.api+json', 'application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling getFile.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ModelFile;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "ModelFile");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve the details of a `File` resource.
     * @summary Fetch a File
     * @param fileId Your &#x60;File&#x60; ID.
     */
    public async get(fileId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<ModelFile> {
        const responseObject = await this.getHelper(fileId,  options);
        return responseObject.body;
    }

    /**
     * Retrieve the details of a `File` resource.
     * @summary Fetch a File
     * @param fileId Your &#x60;File&#x60; ID.
     */
    public async getHttp(fileId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: ModelFile;  rawBody: any;}> {
        const responseObject = await this.getHelper(fileId,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * List the previously created `external_links` for a `File`.
     * @summary List All External Links

    * @param fileId Your &#x60;File&#x60; ID.
    * 
    */
    private async listExternalLinksHelper (fileId: string, listExternalLinksQueryParams?:ListExternalLinksQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ExternalLinksList;  rawBody: any; }> {
        const localVarPath = this.basePath + '/files/{file_id}/external_links'
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/vnd.api+json', 'application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling listExternalLinks.');
        }
        if (listExternalLinksQueryParams != undefined){ 
            if (listExternalLinksQueryParams.sort !== undefined) {
                localVarQueryParameters['sort'] = ObjectSerializer.serialize(listExternalLinksQueryParams.sort, "string");
            }
            if (listExternalLinksQueryParams.afterCursor !== undefined) {
                localVarQueryParameters['after_cursor'] = ObjectSerializer.serialize(listExternalLinksQueryParams.afterCursor, "string");
            }
            if (listExternalLinksQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = ObjectSerializer.serialize(listExternalLinksQueryParams.limit, "number");
            }
            if (listExternalLinksQueryParams.id !== undefined) {
                localVarQueryParameters['id'] = ObjectSerializer.serialize(listExternalLinksQueryParams.id, "string");
            }
            if (listExternalLinksQueryParams.createdAtGte !== undefined) {
                localVarQueryParameters['created_at.gte'] = ObjectSerializer.serialize(listExternalLinksQueryParams.createdAtGte, "string");
            }
            if (listExternalLinksQueryParams.createdAtLte !== undefined) {
                localVarQueryParameters['created_at.lte'] = ObjectSerializer.serialize(listExternalLinksQueryParams.createdAtLte, "string");
            }
            if (listExternalLinksQueryParams.updatedAtGte !== undefined) {
                localVarQueryParameters['updated_at.gte'] = ObjectSerializer.serialize(listExternalLinksQueryParams.updatedAtGte, "string");
            }
            if (listExternalLinksQueryParams.updatedAtLte !== undefined) {
                localVarQueryParameters['updated_at.lte'] = ObjectSerializer.serialize(listExternalLinksQueryParams.updatedAtLte, "string");
            }
            if (listExternalLinksQueryParams.beforeCursor !== undefined) {
                localVarQueryParameters['before_cursor'] = ObjectSerializer.serialize(listExternalLinksQueryParams.beforeCursor, "string");
            }

        }
        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ExternalLinksList;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "ExternalLinksList");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * List the previously created `external_links` for a `File`.
     * @summary List All External Links
     * @param fileId Your &#x60;File&#x60; ID.
     *  
     */
    public async listExternalLinks (fileId: string, listExternalLinksQueryParams?:ListExternalLinksQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<finixList<any>> {
        const responseObject = await this.listExternalLinksHelper(fileId, listExternalLinksQueryParams, options);
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.listExternalLinks(fileId, queryParam);
        }
        let dataList = new finixList<any>(nextFetch, !reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        return dataList;
    }

    /**
     * List the previously created `external_links` for a `File`.
     * @summary List All External Links
     * @param fileId Your &#x60;File&#x60; ID.
     * 
     */
    public async listExternalLinksHttp (fileId: string, listExternalLinksQueryParams?:ListExternalLinksQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, body: finixList<any>, rawBody: any}> {
        const responseObject = await this.listExternalLinksHelper(fileId, listExternalLinksQueryParams, options);
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.listExternalLinks(fileId, queryParam);
        }
        let dataList = new finixList<any>(nextFetch, reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        //dataList.hasMore = !reachedEnd;
        return Promise.resolve({response: responseObject.response, body: dataList, rawBody: responseObject.rawBody});
    }
    /**
     * Helper function. 
     * List all the `File` resources you\'ve created.
     * @summary List All Files

    */
    private async listHelper (listFilesQueryParams?:ListFilesQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: FilesList;  rawBody: any; }> {
        const localVarPath = this.basePath + '/files';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/vnd.api+json', 'application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (listFilesQueryParams != undefined){ 
            if (listFilesQueryParams.sort !== undefined) {
                localVarQueryParameters['sort'] = ObjectSerializer.serialize(listFilesQueryParams.sort, "string");
            }
            if (listFilesQueryParams.afterCursor !== undefined) {
                localVarQueryParameters['after_cursor'] = ObjectSerializer.serialize(listFilesQueryParams.afterCursor, "string");
            }
            if (listFilesQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = ObjectSerializer.serialize(listFilesQueryParams.limit, "number");
            }
            if (listFilesQueryParams.id !== undefined) {
                localVarQueryParameters['id'] = ObjectSerializer.serialize(listFilesQueryParams.id, "string");
            }
            if (listFilesQueryParams.createdAtGte !== undefined) {
                localVarQueryParameters['created_at.gte'] = ObjectSerializer.serialize(listFilesQueryParams.createdAtGte, "string");
            }
            if (listFilesQueryParams.createdAtLte !== undefined) {
                localVarQueryParameters['created_at.lte'] = ObjectSerializer.serialize(listFilesQueryParams.createdAtLte, "string");
            }
            if (listFilesQueryParams.updatedAtGte !== undefined) {
                localVarQueryParameters['updated_at.gte'] = ObjectSerializer.serialize(listFilesQueryParams.updatedAtGte, "string");
            }
            if (listFilesQueryParams.updatedAtLte !== undefined) {
                localVarQueryParameters['updated_at.lte'] = ObjectSerializer.serialize(listFilesQueryParams.updatedAtLte, "string");
            }
            if (listFilesQueryParams.beforeCursor !== undefined) {
                localVarQueryParameters['before_cursor'] = ObjectSerializer.serialize(listFilesQueryParams.beforeCursor, "string");
            }

        }
        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: FilesList;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "FilesList");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * List all the `File` resources you\'ve created.
     * @summary List All Files
     */
    public async list (listFilesQueryParams?:ListFilesQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<finixList<any>> {
        const responseObject = await this.listHelper(listFilesQueryParams, options);
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.list(queryParam);
        }
        let dataList = new finixList<any>(nextFetch, !reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        return dataList;
    }

    /**
     * List all the `File` resources you\'ve created.
     * @summary List All Files
     */
    public async listHttp (listFilesQueryParams?:ListFilesQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, body: finixList<any>, rawBody: any}> {
        const responseObject = await this.listHelper(listFilesQueryParams, options);
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.list(queryParam);
        }
        let dataList = new finixList<any>(nextFetch, reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        //dataList.hasMore = !reachedEnd;
        return Promise.resolve({response: responseObject.response, body: dataList, rawBody: responseObject.rawBody});
    }
    /**
     * Helper function. 
     * Upload files directly with a `multipart/form-data` request.
     * @summary Upload files Directly
     * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file.
     * @param uploadFileRequest 
     */

    private async uploadHelper(fileId: string, uploadFileRequest?: UploadFileRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ModelFile;  rawBody: any; }> {
        const localVarPath = this.basePath + '/files/{file_id}/upload'
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/vnd.api+json', 'application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling uploadFile.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        localVarHeaderParams['Content-Type'] = "multipart/form-data";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (uploadFileRequest && uploadFileRequest.hasOwnProperty('file')){
        //if (uploadFileRequest != undefined && uploadFileRequest != null && uploadFileRequest.hasOwnProperty('file')){
            localVarRequestOptions.formData = uploadFileRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(uploadFileRequest, "UploadFileRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ModelFile;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "ModelFile");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Upload files directly with a `multipart/form-data` request.
     * @summary Upload files Directly
     * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file.
     * @param uploadFileRequest 
     */
    public async upload(fileId: string, uploadFileRequest?: UploadFileRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<ModelFile> {
        const responseObject = await this.uploadHelper(fileId, uploadFileRequest,  options);
        return responseObject.body;
    }

    /**
     * Upload files directly with a `multipart/form-data` request.
     * @summary Upload files Directly
     * @param fileId The ID of the &#x60;File&#x60; that was created to upload the file.
     * @param uploadFileRequest 
     */
    public async uploadHttp(fileId: string, uploadFileRequest?: UploadFileRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: ModelFile;  rawBody: any;}> {
        const responseObject = await this.uploadHelper(fileId, uploadFileRequest,  options);
        return responseObject;
    }


    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */ 
    // @ts-ignore: Not all endpoints have list views
    private embeddedHelper(responseObject: any, dataList: finixList<any>){
        if(responseObject.body.embedded == null || responseObject.body.embedded == undefined){
            dataList.page = responseObject.body.page;
            dataList.links = responseObject.body.links;
            return dataList;
        }
        const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
        let tempList = <finixList<any>> responseObject.body.embedded[embeddedName];
        tempList.forEach((item: any) => {dataList.add(item)});
        dataList.page = responseObject.body.page;
        dataList.links = responseObject.body.links;
        return dataList;
    }

    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    // @ts-ignore: Not all endpoints have list views
    private getOffsetQueryParam(responseObject: any, queryParam: any){
        queryParam.offset = responseObject.body.page.offset + responseObject.body.page.limit;
        var endReached: Boolean = false;
        if (responseObject.body.page.offset + responseObject.body.page.limit > responseObject.body.page.count){
            endReached = true;
        }
        return [queryParam, endReached];
    }

    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    // @ts-ignore: Not all endpoints have list views
    private getCursorQueryParam(responseObject: any, queryParam: any){
        queryParam.afterCursor = responseObject.body.page.nextCursor;
        var endReached: Boolean = false;
        if (responseObject.body.page.nextCursor == undefined){
            endReached = true;
        }
        return [queryParam, endReached];
    }
}   
