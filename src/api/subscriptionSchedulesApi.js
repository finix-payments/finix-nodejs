/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import localVarRequest from 'request';
import { ObjectSerializer, VoidAuth, SuperSet } from '../model/models';
import { HttpBasicAuth } from '../model/models';
import { HttpError } from './apis';
import { error } from 'console';
let defaultBasePath = 'https://finix.sandbox-payments-api.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
export var SubscriptionSchedulesApiApiKeys;
(function (SubscriptionSchedulesApiApiKeys) {
})(SubscriptionSchedulesApiApiKeys || (SubscriptionSchedulesApiApiKeys = {}));
export class SubscriptionSchedulesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        this.interceptors = [];
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SubscriptionSchedulesApiApiKeys[key]].apiKey = value;
    }
    set username(username) {
        this.authentications.BasicAuth.username = username;
    }
    set password(password) {
        this.authentications.BasicAuth.password = password;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Helper function.
     * Retrieve the details of a `subscription_schedule`
     * @summary Get a Subscription Schedule
     * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;.
     * @param nickname Filter by the object\&#39;s &#x60;nickname&#x60;.
     * @param type Filter by the object\&#39;s &#x60;subscription_type&#x60;.
     */
    getHelper(subscriptionScheduleId, nickname, type, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_schedules/{subscription_schedule_id}'
                .replace('{' + 'subscription_schedule_id' + '}', encodeURIComponent(String(subscriptionScheduleId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'subscriptionScheduleId' is not null or undefined
            if (subscriptionScheduleId === null || subscriptionScheduleId === undefined) {
                throw new Error('Required parameter subscriptionScheduleId was null or undefined when calling getSubscriptionSchedule.');
            }
            if (nickname !== undefined) {
                localVarQueryParameters['nickname'] = ObjectSerializer.serialize(nickname, "string");
            }
            if (type !== undefined) {
                localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = ObjectSerializer.deserialize(body, "SubscriptionSchedule");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Retrieve the details of a `subscription_schedule`
     * @summary Get a Subscription Schedule
     * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;.
     * @param nickname Filter by the object\&#39;s &#x60;nickname&#x60;.
     * @param type Filter by the object\&#39;s &#x60;subscription_type&#x60;.
     */
    get(subscriptionScheduleId, nickname, type, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.getHelper(subscriptionScheduleId, nickname, type, options);
            return responseObject.body;
        });
    }
    /**
     * Retrieve the details of a `subscription_schedule`
     * @summary Get a Subscription Schedule
     * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;.
     * @param nickname Filter by the object\&#39;s &#x60;nickname&#x60;.
     * @param type Filter by the object\&#39;s &#x60;subscription_type&#x60;.
     */
    getHttp(subscriptionScheduleId, nickname, type, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.getHelper(subscriptionScheduleId, nickname, type, options);
            return responseObject;
        });
    }
    /**
     * Helper function.
     * Retrieve a list of `Subscription Schedules`.
     * @summary List Subscription Schedules

    */
    listHelper(listSubscriptionSchedulesQueryParams, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_schedules';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (listSubscriptionSchedulesQueryParams != undefined) {
                if (listSubscriptionSchedulesQueryParams.nickname !== undefined) {
                    localVarQueryParameters['nickname'] = ObjectSerializer.serialize(listSubscriptionSchedulesQueryParams.nickname, "string");
                }
                if (listSubscriptionSchedulesQueryParams.type !== undefined) {
                    localVarQueryParameters['type'] = ObjectSerializer.serialize(listSubscriptionSchedulesQueryParams.type, "string");
                }
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = ObjectSerializer.deserialize(body, "SubscriptionSchedulesList");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Retrieve a list of `Subscription Schedules`.
     * @summary List Subscription Schedules
     */
    list(listSubscriptionSchedulesQueryParams, options = { headers: {} }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listHelper(listSubscriptionSchedulesQueryParams, options);
            // var queryParam: ListSubscriptionSchedulesQueryParams;
            var reachedEnd;
            if ((_b = (_a = responseObject.body) === null || _a === void 0 ? void 0 : _a.page) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('nextCursor')) {
                var queryParam = {
                    afterCursor: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getCursorQueryParam(responseObject, queryParam);
            }
            else {
                var queryParam = {
                    offset: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getoffsetQueryParam(responseObject, queryParam);
            }
            const nextFetch = (limit) => {
                queryParam.limit = limit;
                if (reachedEnd) {
                    throw new error("End of list reached");
                }
                return this.list(queryParam);
            };
            let dataList = new SuperSet(nextFetch);
            dataList = yield this.embeddedHelper(responseObject, dataList);
            return dataList;
        });
    }
    /**
     * Retrieve a list of `Subscription Schedules`.
     * @summary List Subscription Schedules
     */
    listHttp(listSubscriptionSchedulesQueryParams, options = { headers: {} }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listHelper(listSubscriptionSchedulesQueryParams, options);
            //var queryParam: ListSubscriptionSchedulesQueryParams;
            var reachedEnd;
            if ((_b = (_a = responseObject.body) === null || _a === void 0 ? void 0 : _a.page) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('nextCursor')) {
                var queryParam = {
                    afterCursor: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getCursorQueryParam(responseObject, queryParam);
            }
            else {
                var queryParam = {
                    offset: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getoffsetQueryParam(responseObject, queryParam);
            }
            const nextFetch = (limit) => {
                queryParam.limit = limit;
                if (reachedEnd) {
                    throw new error("End of list reached");
                }
                return this.list(queryParam);
            };
            let dataList = new SuperSet(nextFetch);
            dataList = yield this.embeddedHelper(responseObject, dataList);
            return Promise.resolve({ response: responseObject.response, body: dataList });
        });
    }
    /**
     * Helper function.
     * Create a `subscription_schedule`.
     * @summary Create a Subscription Schedule
     * @param createSubscriptionScheduleRequest
     */
    createHelper(createSubscriptionScheduleRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_schedules';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (createSubscriptionScheduleRequest != undefined && createSubscriptionScheduleRequest != null && createSubscriptionScheduleRequest.hasOwnProperty('file')) {
                localVarRequestOptions.formData = createSubscriptionScheduleRequest;
            }
            else {
                localVarRequestOptions.body = ObjectSerializer.serialize(createSubscriptionScheduleRequest, "CreateSubscriptionScheduleRequest");
            }
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = ObjectSerializer.deserialize(body, "SubscriptionSchedule");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Create a `subscription_schedule`.
     * @summary Create a Subscription Schedule
     * @param createSubscriptionScheduleRequest
     */
    create(createSubscriptionScheduleRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createHelper(createSubscriptionScheduleRequest, options);
            return responseObject.body;
        });
    }
    /**
     * Create a `subscription_schedule`.
     * @summary Create a Subscription Schedule
     * @param createSubscriptionScheduleRequest
     */
    createHttp(createSubscriptionScheduleRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createHelper(createSubscriptionScheduleRequest, options);
            return responseObject;
        });
    }
    /**
     * Helper function.
     * Update the details of a `subscription_schedule`.
     * @summary Update a Subscription Schedule
     * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;.
     * @param updateSubscriptionScheduleRequest
     */
    updateHelper(subscriptionScheduleId, updateSubscriptionScheduleRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_schedules/{subscription_schedule_id}'
                .replace('{' + 'subscription_schedule_id' + '}', encodeURIComponent(String(subscriptionScheduleId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'subscriptionScheduleId' is not null or undefined
            if (subscriptionScheduleId === null || subscriptionScheduleId === undefined) {
                throw new Error('Required parameter subscriptionScheduleId was null or undefined when calling updateSubscriptionSchedules.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (updateSubscriptionScheduleRequest != undefined && updateSubscriptionScheduleRequest != null && updateSubscriptionScheduleRequest.hasOwnProperty('file')) {
                localVarRequestOptions.formData = updateSubscriptionScheduleRequest;
            }
            else {
                localVarRequestOptions.body = ObjectSerializer.serialize(updateSubscriptionScheduleRequest, "UpdateSubscriptionScheduleRequest");
            }
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = ObjectSerializer.deserialize(body, "SubscriptionSchedule");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Update the details of a `subscription_schedule`.
     * @summary Update a Subscription Schedule
     * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;.
     * @param updateSubscriptionScheduleRequest
     */
    update(subscriptionScheduleId, updateSubscriptionScheduleRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.updateHelper(subscriptionScheduleId, updateSubscriptionScheduleRequest, options);
            return responseObject.body;
        });
    }
    /**
     * Update the details of a `subscription_schedule`.
     * @summary Update a Subscription Schedule
     * @param subscriptionScheduleId The ID of the &#x60;Subscription Schedule&#x60;.
     * @param updateSubscriptionScheduleRequest
     */
    updateHttp(subscriptionScheduleId, updateSubscriptionScheduleRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.updateHelper(subscriptionScheduleId, updateSubscriptionScheduleRequest, options);
            return responseObject;
        });
    }
    embeddedHelper(responseObject, dataList) {
        return __awaiter(this, void 0, void 0, function* () {
            if (responseObject.body.embedded == null || responseObject.body.embedded == undefined) {
                // const dataList = new SuperSet<any>();
                dataList.page = responseObject.body.page;
                dataList.links = responseObject.body.links;
                return dataList;
            }
            const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
            let tempList = responseObject.body.embedded[embeddedName];
            // const dataList = new SuperSet<any>();
            tempList.forEach(item => { dataList.add(item); });
            dataList.page = responseObject.body.page;
            dataList.links = responseObject.body.links;
            return dataList;
        });
    }
    getoffsetQueryParam(responseObject, queryParam) {
        queryParam.offset = responseObject.body.page.offset;
        var endReached = false;
        if (responseObject.body.page.offset + responseObject.body.page.limit > responseObject.body.page.count) {
            endReached = true;
        }
        return [queryParam, endReached];
    }
    getCursorQueryParam(responseObject, queryParam) {
        queryParam.afterCursor = responseObject.body.page.nextCursor;
        var endReached = false;
        if (responseObject.body.page.nextCursor == undefined) {
            endReached = true;
        }
        return [queryParam, endReached];
    }
}
//# sourceMappingURL=subscriptionSchedulesApi.js.map