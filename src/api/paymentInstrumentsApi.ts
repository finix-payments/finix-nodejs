/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import * as http from 'http';
import * as fs from 'fs';
/* tslint:disable:no-unused-locals */
import { ApplePaySession } from '../model/applePaySession';
import { ApplePaySessionRequest } from '../model/applePaySessionRequest';
import { CreatePaymentInstrumentRequest } from '../model/createPaymentInstrumentRequest';
import { CreateVerificationRequest } from '../model/createVerificationRequest';
import { Error401Unauthorized } from '../model/error401Unauthorized';
import { Error403ForbiddenList } from '../model/error403ForbiddenList';
import { Error404NotFoundList } from '../model/error404NotFoundList';
import { Error406NotAcceptable } from '../model/error406NotAcceptable';
import { Error422InvalidFieldList } from '../model/error422InvalidFieldList';
import { ErrorGeneric } from '../model/errorGeneric';
import { PaymentInstrument } from '../model/paymentInstrument';
import { PaymentInstrumentsList } from '../model/paymentInstrumentsList';
import { UpdatePaymentInstrumentRequest } from '../model/updatePaymentInstrumentRequest';
import { Verification } from '../model/verification';
import { ListPaymentInstrumentsQueryParams } from '../model/listPaymentInstrumentsQueryParams';
import { ObjectSerializer, Authentication, VoidAuth, Interceptor, SuperSet } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://finix.sandbox-payments-api.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum PaymentInstrumentsApiApiKeys {
}

export class PaymentInstrumentsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'BasicAuth': new HttpBasicAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: PaymentInstrumentsApiApiKeys, value: string) {
        (this.authentications as any)[PaymentInstrumentsApiApiKeys[key]].apiKey = value;
    }

    set username(username: string) {
        this.authentications.BasicAuth.username = username;
    }

    set password(password: string) {
        this.authentications.BasicAuth.password = password;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Helper function. 
     * Create an `apple_pay_session` to process Apple Pay transactions on the web.  To create an Apple Pay Session, pass the unique `validation_url` (provided by Apple) while creating an `apple_pay_sessions` resource. Finix returns a `merchantSession` object that you can use to create a payment. For more information, see [Apple Pay](/docs/guides/payments/alternative-payment-methods/apple-pay/).
     * @summary Create an Apple Pay Session
     * @param applePaySessionRequest 
     */

    private async createApplePaySessionHelper(applePaySessionRequest?: ApplePaySessionRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApplePaySession;  }> {
        const localVarPath = this.basePath + '/apple_pay_sessions';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};


        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (applePaySessionRequest.hasOwnProperty('file')){
            applePaySessionRequest = await this.fileHelper(applePaySessionRequest);
            localVarRequestOptions.formData = applePaySessionRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(applePaySessionRequest, "ApplePaySessionRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApplePaySession;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApplePaySession");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Create an `apple_pay_session` to process Apple Pay transactions on the web.  To create an Apple Pay Session, pass the unique `validation_url` (provided by Apple) while creating an `apple_pay_sessions` resource. Finix returns a `merchantSession` object that you can use to create a payment. For more information, see [Apple Pay](/docs/guides/payments/alternative-payment-methods/apple-pay/).
     * @summary Create an Apple Pay Session
     * @param applePaySessionRequest 
     */

    public async createApplePaySession(applePaySessionRequest?: ApplePaySessionRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<ApplePaySession> {
        const responseObject = await this.createApplePaySessionHelper(applePaySessionRequest,  options);
        return responseObject.body;
    }

    /**
     * Create an `apple_pay_session` to process Apple Pay transactions on the web.  To create an Apple Pay Session, pass the unique `validation_url` (provided by Apple) while creating an `apple_pay_sessions` resource. Finix returns a `merchantSession` object that you can use to create a payment. For more information, see [Apple Pay](/docs/guides/payments/alternative-payment-methods/apple-pay/).
     * @summary Create an Apple Pay Session
     * @param applePaySessionRequest 
     */

    public async createApplePaySessionHttp(applePaySessionRequest?: ApplePaySessionRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: ApplePaySession; }> {
        const responseObject = await this.createApplePaySessionHelper(applePaySessionRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Create a `Payment Instrument` resource using a card or bank account.  To accept payment details, review our guide on how to [tokenize cards using hosted fields](/guides/payments/tokenization-with-hosted-fields).  > The creation of `Payment Instruments` using cards directly via Finix\'s API should only be done for testing purposes. You must use the Hosted Tokenization fields or javascript client to remain out of PCI scope.
     * @summary Create a Payment Instrument
     * @param createPaymentInstrumentRequest 
     */

    private async createHelper(createPaymentInstrumentRequest?: CreatePaymentInstrumentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInstrument;  }> {
        const localVarPath = this.basePath + '/payment_instruments';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};


        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (createPaymentInstrumentRequest.hasOwnProperty('file')){
            createPaymentInstrumentRequest = await this.fileHelper(createPaymentInstrumentRequest);
            localVarRequestOptions.formData = createPaymentInstrumentRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(createPaymentInstrumentRequest, "CreatePaymentInstrumentRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInstrument;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInstrument");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Create a `Payment Instrument` resource using a card or bank account.  To accept payment details, review our guide on how to [tokenize cards using hosted fields](/guides/payments/tokenization-with-hosted-fields).  > The creation of `Payment Instruments` using cards directly via Finix\'s API should only be done for testing purposes. You must use the Hosted Tokenization fields or javascript client to remain out of PCI scope.
     * @summary Create a Payment Instrument
     * @param createPaymentInstrumentRequest 
     */

    public async create(createPaymentInstrumentRequest?: CreatePaymentInstrumentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<PaymentInstrument> {
        const responseObject = await this.createHelper(createPaymentInstrumentRequest,  options);
        return responseObject.body;
    }

    /**
     * Create a `Payment Instrument` resource using a card or bank account.  To accept payment details, review our guide on how to [tokenize cards using hosted fields](/guides/payments/tokenization-with-hosted-fields).  > The creation of `Payment Instruments` using cards directly via Finix\'s API should only be done for testing purposes. You must use the Hosted Tokenization fields or javascript client to remain out of PCI scope.
     * @summary Create a Payment Instrument
     * @param createPaymentInstrumentRequest 
     */

    public async createHttp(createPaymentInstrumentRequest?: CreatePaymentInstrumentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: PaymentInstrument; }> {
        const responseObject = await this.createHelper(createPaymentInstrumentRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Verify a `Payment Instrument` to determine if it\'s elligable for Push To Card transactions.   > Only verify `Payment Instruments` for [Push To Card](/guides/push-to-card) customers.
     * @summary Verify a Payment Instrument
     * @param paymentInstrumentId ID of object
     * @param createVerificationRequest 
     */

    private async createPaymentInstrumentVerificationHelper(paymentInstrumentId: string, createVerificationRequest?: CreateVerificationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Verification;  }> {
        const localVarPath = this.basePath + '/payment_instruments/{payment_instrument_id}/verifications'
            .replace('{' + 'payment_instrument_id' + '}', encodeURIComponent(String(paymentInstrumentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInstrumentId' is not null or undefined
        if (paymentInstrumentId === null || paymentInstrumentId === undefined) {
            throw new Error('Required parameter paymentInstrumentId was null or undefined when calling createPaymentInstrumentVerification.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (createVerificationRequest.hasOwnProperty('file')){
            createVerificationRequest = await this.fileHelper(createVerificationRequest);
            localVarRequestOptions.formData = createVerificationRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(createVerificationRequest, "CreateVerificationRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Verification;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Verification");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Verify a `Payment Instrument` to determine if it\'s elligable for Push To Card transactions.   > Only verify `Payment Instruments` for [Push To Card](/guides/push-to-card) customers.
     * @summary Verify a Payment Instrument
     * @param paymentInstrumentId ID of object
     * @param createVerificationRequest 
     */

    public async createPaymentInstrumentVerification(paymentInstrumentId: string, createVerificationRequest?: CreateVerificationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Verification> {
        const responseObject = await this.createPaymentInstrumentVerificationHelper(paymentInstrumentId, createVerificationRequest,  options);
        return responseObject.body;
    }

    /**
     * Verify a `Payment Instrument` to determine if it\'s elligable for Push To Card transactions.   > Only verify `Payment Instruments` for [Push To Card](/guides/push-to-card) customers.
     * @summary Verify a Payment Instrument
     * @param paymentInstrumentId ID of object
     * @param createVerificationRequest 
     */

    public async createPaymentInstrumentVerificationHttp(paymentInstrumentId: string, createVerificationRequest?: CreateVerificationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Verification; }> {
        const responseObject = await this.createPaymentInstrumentVerificationHelper(paymentInstrumentId, createVerificationRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Retrieve the details of a `Payment Instrument`.
     * @summary Get a Payment Instrument
     * @param paymentInstrumentId ID of object
     */

    private async getHelper(paymentInstrumentId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInstrument;  }> {
        const localVarPath = this.basePath + '/payment_instruments/{payment_instrument_id}'
            .replace('{' + 'payment_instrument_id' + '}', encodeURIComponent(String(paymentInstrumentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInstrumentId' is not null or undefined
        if (paymentInstrumentId === null || paymentInstrumentId === undefined) {
            throw new Error('Required parameter paymentInstrumentId was null or undefined when calling getPaymentInstrument.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInstrument;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInstrument");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve the details of a `Payment Instrument`.
     * @summary Get a Payment Instrument
     * @param paymentInstrumentId ID of object
     */

    public async get(paymentInstrumentId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<PaymentInstrument> {
        const responseObject = await this.getHelper(paymentInstrumentId,  options);
        return responseObject.body;
    }

    /**
     * Retrieve the details of a `Payment Instrument`.
     * @summary Get a Payment Instrument
     * @param paymentInstrumentId ID of object
     */

    public async getHttp(paymentInstrumentId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: PaymentInstrument; }> {
        const responseObject = await this.getHelper(paymentInstrumentId,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Retrieve a list of `Payment Instruments`.
     * @summary List Payment Instruments

    */
    private async listHelper (listPaymentInstrumentsQueryParams?:ListPaymentInstrumentsQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInstrumentsList;  }> {
        const localVarPath = this.basePath + '/payment_instruments';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (listPaymentInstrumentsQueryParams != undefined){ 
            if (listPaymentInstrumentsQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.limit, "number");
            }
            if (listPaymentInstrumentsQueryParams.afterCursor !== undefined) {
                localVarQueryParameters['after_cursor'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.afterCursor, "string");
            }
            if (listPaymentInstrumentsQueryParams.accountLast4 !== undefined) {
                localVarQueryParameters['account_last4'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.accountLast4, "string");
            }
            if (listPaymentInstrumentsQueryParams.accountRoutingNumber !== undefined) {
                localVarQueryParameters['account_routing_number'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.accountRoutingNumber, "string");
            }
            if (listPaymentInstrumentsQueryParams.application !== undefined) {
                localVarQueryParameters['application'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.application, "string");
            }
            if (listPaymentInstrumentsQueryParams.bin !== undefined) {
                localVarQueryParameters['bin'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.bin, "string");
            }
            if (listPaymentInstrumentsQueryParams.createdAtGte !== undefined) {
                localVarQueryParameters['created_at.gte'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.createdAtGte, "string");
            }
            if (listPaymentInstrumentsQueryParams.createdAtLte !== undefined) {
                localVarQueryParameters['created_at.lte'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.createdAtLte, "string");
            }
            if (listPaymentInstrumentsQueryParams.expirationMonth !== undefined) {
                localVarQueryParameters['expiration_month'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.expirationMonth, "string");
            }
            if (listPaymentInstrumentsQueryParams.expirationYear !== undefined) {
                localVarQueryParameters['expiration_year'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.expirationYear, "string");
            }
            if (listPaymentInstrumentsQueryParams.lastFour !== undefined) {
                localVarQueryParameters['last_four'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.lastFour, "string");
            }
            if (listPaymentInstrumentsQueryParams.name !== undefined) {
                localVarQueryParameters['name'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.name, "string");
            }
            if (listPaymentInstrumentsQueryParams.ownerIdentityId !== undefined) {
                localVarQueryParameters['owner_identity_id'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.ownerIdentityId, "string");
            }
            if (listPaymentInstrumentsQueryParams.type !== undefined) {
                localVarQueryParameters['type'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.type, "'ALL' | 'BANK_ACCOUNT' | 'PAYMENT_CARD'");
            }
            if (listPaymentInstrumentsQueryParams.beforeCursor !== undefined) {
                localVarQueryParameters['before_cursor'] = ObjectSerializer.serialize(listPaymentInstrumentsQueryParams.beforeCursor, "string");
            }

        }
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInstrumentsList;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInstrumentsList");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve a list of `Payment Instruments`.
     * @summary List Payment Instruments

    */
    public async list (listPaymentInstrumentsQueryParams?:ListPaymentInstrumentsQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<SuperSet<any>> {
        const responseObject = await this.listHelper(listPaymentInstrumentsQueryParams, options);

        let dataList = await this.embeddedHelper(responseObject);
        return dataList;
    }

    /**
     * Retrieve a list of `Payment Instruments`.
     * @summary List Payment Instruments

    */
    public async listHttp (listPaymentInstrumentsQueryParams?:ListPaymentInstrumentsQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, body: SuperSet<any>}> {
        const responseObject = await this.listHelper(listPaymentInstrumentsQueryParams, options);

        let dataList = await this.embeddedHelper(responseObject);
        return Promise.resolve({response: responseObject.response, body: dataList});
    }
    /**
     * Helper function. 
     * Update a `Payment Instrument`.
     * @summary Update a Payment Instrument
     * @param paymentInstrumentId ID of object
     * @param updatePaymentInstrumentRequest 
     */

    private async updateHelper(paymentInstrumentId: string, updatePaymentInstrumentRequest?: UpdatePaymentInstrumentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInstrument;  }> {
        const localVarPath = this.basePath + '/payment_instruments/{payment_instrument_id}'
            .replace('{' + 'payment_instrument_id' + '}', encodeURIComponent(String(paymentInstrumentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInstrumentId' is not null or undefined
        if (paymentInstrumentId === null || paymentInstrumentId === undefined) {
            throw new Error('Required parameter paymentInstrumentId was null or undefined when calling updatePaymentInstrument.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (updatePaymentInstrumentRequest.hasOwnProperty('file')){
            updatePaymentInstrumentRequest = await this.fileHelper(updatePaymentInstrumentRequest);
            localVarRequestOptions.formData = updatePaymentInstrumentRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(updatePaymentInstrumentRequest, "UpdatePaymentInstrumentRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInstrument;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInstrument");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Update a `Payment Instrument`.
     * @summary Update a Payment Instrument
     * @param paymentInstrumentId ID of object
     * @param updatePaymentInstrumentRequest 
     */

    public async update(paymentInstrumentId: string, updatePaymentInstrumentRequest?: UpdatePaymentInstrumentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<PaymentInstrument> {
        const responseObject = await this.updateHelper(paymentInstrumentId, updatePaymentInstrumentRequest,  options);
        return responseObject.body;
    }

    /**
     * Update a `Payment Instrument`.
     * @summary Update a Payment Instrument
     * @param paymentInstrumentId ID of object
     * @param updatePaymentInstrumentRequest 
     */

    public async updateHttp(paymentInstrumentId: string, updatePaymentInstrumentRequest?: UpdatePaymentInstrumentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: PaymentInstrument; }> {
        const responseObject = await this.updateHelper(paymentInstrumentId, updatePaymentInstrumentRequest,  options);
        return responseObject;
    }


    private async embeddedHelper(responseObject: any){
        const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
        let dataList = <SuperSet<any>> responseObject.body.embedded[embeddedName];
        dataList.page = responseObject.body.page;
        dataList.links = responseObject.body.links;
        return dataList;
    }

    private async fileHelper(request: any){
        request.file = fs.createReadStream(<string>request.file)
        return request;
    }
}
