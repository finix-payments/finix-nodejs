/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import * as http from 'http';
import * as fs from 'fs';
/* tslint:disable:no-unused-locals */
import { Authorization } from '../model/authorization';
import { AuthorizationsList } from '../model/authorizationsList';
import { CreateAuthorizationRequest } from '../model/createAuthorizationRequest';
import { Error401Unauthorized } from '../model/error401Unauthorized';
import { Error403ForbiddenList } from '../model/error403ForbiddenList';
import { Error404NotFoundList } from '../model/error404NotFoundList';
import { Error406NotAcceptable } from '../model/error406NotAcceptable';
import { Error422InvalidFieldList } from '../model/error422InvalidFieldList';
import { ErrorGeneric } from '../model/errorGeneric';
import { UpdateAuthorizationRequest } from '../model/updateAuthorizationRequest';
import { ListAuthorizationsQueryParams } from '../model/listAuthorizationsQueryParams';
import { ObjectSerializer, Authentication, VoidAuth, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://finix.sandbox-payments-api.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AuthorizationsApiApiKeys {
}

export class AuthorizationsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'BasicAuth': new HttpBasicAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: AuthorizationsApiApiKeys, value: string) {
        (this.authentications as any)[AuthorizationsApiApiKeys[key]].apiKey = value;
    }

    set username(username: string) {
        this.authentications.BasicAuth.username = username;
    }

    set password(password: string) {
        this.authentications.BasicAuth.password = password;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Helper function. 
     * Create an `Authorization` to process a transaction.  `Authorizations` can have two possible `states`:  - **SUCCEEDED**  - **FAILED**  If the `Authorization` has **SUCCEEDED** , it must be captured before `expires_at` passes or the funds will be released.  Learn how to prevent duplicate authorizations by passing an [Idempotency ID](#section/Idempotency-Requests) in the payload.
     * @summary Create an Authorization
     * @param createAuthorizationRequest 
     */

    private async createHelper(createAuthorizationRequest?: CreateAuthorizationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Authorization;  }> {
        const localVarPath = this.basePath + '/authorizations';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};


        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (createAuthorizationRequest != undefined && createAuthorizationRequest != null && createAuthorizationRequest.hasOwnProperty('file')){
            localVarRequestOptions.formData = createAuthorizationRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(createAuthorizationRequest, "CreateAuthorizationRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Authorization;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Authorization");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Create an `Authorization` to process a transaction.  `Authorizations` can have two possible `states`:  - **SUCCEEDED**  - **FAILED**  If the `Authorization` has **SUCCEEDED** , it must be captured before `expires_at` passes or the funds will be released.  Learn how to prevent duplicate authorizations by passing an [Idempotency ID](#section/Idempotency-Requests) in the payload.
     * @summary Create an Authorization
     * @param createAuthorizationRequest 
     */
    public async create(createAuthorizationRequest?: CreateAuthorizationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Authorization> {
        const responseObject = await this.createHelper(createAuthorizationRequest,  options);
        return responseObject.body;
    }

    /**
     * Create an `Authorization` to process a transaction.  `Authorizations` can have two possible `states`:  - **SUCCEEDED**  - **FAILED**  If the `Authorization` has **SUCCEEDED** , it must be captured before `expires_at` passes or the funds will be released.  Learn how to prevent duplicate authorizations by passing an [Idempotency ID](#section/Idempotency-Requests) in the payload.
     * @summary Create an Authorization
     * @param createAuthorizationRequest 
     */
    public async createHttp(createAuthorizationRequest?: CreateAuthorizationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Authorization; }> {
        const responseObject = await this.createHelper(createAuthorizationRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Retrieve the details of a previously created `Authorization`.
     * @summary Get an Authorization
     * @param authorizationId ID of authorization to fetch
     */

    private async getHelper(authorizationId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Authorization;  }> {
        const localVarPath = this.basePath + '/authorizations/{authorization_id}'
            .replace('{' + 'authorization_id' + '}', encodeURIComponent(String(authorizationId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'authorizationId' is not null or undefined
        if (authorizationId === null || authorizationId === undefined) {
            throw new Error('Required parameter authorizationId was null or undefined when calling getAuthorization.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Authorization;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Authorization");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve the details of a previously created `Authorization`.
     * @summary Get an Authorization
     * @param authorizationId ID of authorization to fetch
     */
    public async get(authorizationId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Authorization> {
        const responseObject = await this.getHelper(authorizationId,  options);
        return responseObject.body;
    }

    /**
     * Retrieve the details of a previously created `Authorization`.
     * @summary Get an Authorization
     * @param authorizationId ID of authorization to fetch
     */
    public async getHttp(authorizationId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Authorization; }> {
        const responseObject = await this.getHelper(authorizationId,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Retrieve a list of `Authorizations`. 
     * @summary List Authorizations

    */
    private async listHelper (listAuthorizationsQueryParams?:ListAuthorizationsQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AuthorizationsList;  }> {
        const localVarPath = this.basePath + '/authorizations';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (listAuthorizationsQueryParams != undefined){ 
            if (listAuthorizationsQueryParams.sort !== undefined) {
                localVarQueryParameters['sort'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.sort, "string");
            }
            if (listAuthorizationsQueryParams.beforeCursor !== undefined) {
                localVarQueryParameters['before_cursor'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.beforeCursor, "string");
            }
            if (listAuthorizationsQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.limit, "number");
            }
            if (listAuthorizationsQueryParams.idempotencyId !== undefined) {
                localVarQueryParameters['idempotency_id'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.idempotencyId, "string");
            }
            if (listAuthorizationsQueryParams.state !== undefined) {
                localVarQueryParameters['state'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.state, "'SUCCEEDED' | 'FAILED' | 'PENDING' | 'CANCELED'");
            }
            if (listAuthorizationsQueryParams.createdAtGte !== undefined) {
                localVarQueryParameters['created_at.gte'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.createdAtGte, "string");
            }
            if (listAuthorizationsQueryParams.createdAtLte !== undefined) {
                localVarQueryParameters['created_at.lte'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.createdAtLte, "string");
            }
            if (listAuthorizationsQueryParams.updatedAtGte !== undefined) {
                localVarQueryParameters['updated_at.gte'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.updatedAtGte, "string");
            }
            if (listAuthorizationsQueryParams.updatedAtLte !== undefined) {
                localVarQueryParameters['updated_at.lte'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.updatedAtLte, "string");
            }
            if (listAuthorizationsQueryParams.isVoid !== undefined) {
                localVarQueryParameters['is_void'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.isVoid, "string");
            }
            if (listAuthorizationsQueryParams.amount !== undefined) {
                localVarQueryParameters['amount'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.amount, "number");
            }
            if (listAuthorizationsQueryParams.amountLt !== undefined) {
                localVarQueryParameters['amount.lt'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.amountLt, "number");
            }
            if (listAuthorizationsQueryParams.amountGt !== undefined) {
                localVarQueryParameters['amount.gt'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.amountGt, "number");
            }
            if (listAuthorizationsQueryParams.amountLte !== undefined) {
                localVarQueryParameters['amount.lte'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.amountLte, "number");
            }
            if (listAuthorizationsQueryParams.amountGte !== undefined) {
                localVarQueryParameters['amount.gte'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.amountGte, "number");
            }
            if (listAuthorizationsQueryParams.traceId !== undefined) {
                localVarQueryParameters['trace_id'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.traceId, "string");
            }
            if (listAuthorizationsQueryParams.instrumentBin !== undefined) {
                localVarQueryParameters['instrument_bin'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.instrumentBin, "string");
            }
            if (listAuthorizationsQueryParams.instrumentAccountLast4 !== undefined) {
                localVarQueryParameters['instrument_account_last4'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.instrumentAccountLast4, "string");
            }
            if (listAuthorizationsQueryParams.instrumentBrandType !== undefined) {
                localVarQueryParameters['instrument_brand_type'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.instrumentBrandType, "string");
            }
            if (listAuthorizationsQueryParams.merchantIdentityId !== undefined) {
                localVarQueryParameters['merchant_identity_id'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.merchantIdentityId, "string");
            }
            if (listAuthorizationsQueryParams.merchantIdentityName !== undefined) {
                localVarQueryParameters['merchant_identity_name'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.merchantIdentityName, "string");
            }
            if (listAuthorizationsQueryParams.instrumentName !== undefined) {
                localVarQueryParameters['instrument_name'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.instrumentName, "string");
            }
            if (listAuthorizationsQueryParams.instrumentType !== undefined) {
                localVarQueryParameters['instrument_type'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.instrumentType, "string");
            }
            if (listAuthorizationsQueryParams.merchantId !== undefined) {
                localVarQueryParameters['merchant_id'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.merchantId, "string");
            }
            if (listAuthorizationsQueryParams.merchantMid !== undefined) {
                localVarQueryParameters['merchant_mid'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.merchantMid, "string");
            }
            if (listAuthorizationsQueryParams.instrumentCardLast4 !== undefined) {
                localVarQueryParameters['instrument_card_last4'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.instrumentCardLast4, "string");
            }
            if (listAuthorizationsQueryParams.merchantProcessorId !== undefined) {
                localVarQueryParameters['merchant_processor_id'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.merchantProcessorId, "string");
            }
            if (listAuthorizationsQueryParams.type !== undefined) {
                localVarQueryParameters['type'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.type, "string");
            }
            if (listAuthorizationsQueryParams.afterCursor !== undefined) {
                localVarQueryParameters['after_cursor'] = ObjectSerializer.serialize(listAuthorizationsQueryParams.afterCursor, "string");
            }

        }
        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AuthorizationsList;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AuthorizationsList");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve a list of `Authorizations`. 
     * @summary List Authorizations
     */
    public async list (listAuthorizationsQueryParams?:ListAuthorizationsQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<finixList<any>> {
        const responseObject = await this.listHelper(listAuthorizationsQueryParams, options);
        // var queryParam: ListAuthorizationsQueryParams;
        var reachedEnd: Boolean;
        if(responseObject.body?.page?.hasOwnProperty('nextCursor')){
            var queryParam: any = {
                afterCursor: '',
                limit: 20
            };
            [queryParam, reachedEnd] = this.getCursorQueryParam(responseObject, queryParam);
        }
        else{
            var queryParam: any = {
                offset: '',
                limit: 20
            };
            [queryParam, reachedEnd] = this.getoffsetQueryParam(responseObject, queryParam);
        }
        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.list(queryParam);
        }
        let dataList = new finixList<any>(nextFetch);
        dataList = await this.embeddedHelper(responseObject, dataList);
        dataList.hasMore = !reachedEnd;
        return dataList;
    }

    /**
     * Retrieve a list of `Authorizations`. 
     * @summary List Authorizations
     */
    public async listHttp (listAuthorizationsQueryParams?:ListAuthorizationsQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, body: finixList<any>}> {
        const responseObject = await this.listHelper(listAuthorizationsQueryParams, options);
        //var queryParam: ListAuthorizationsQueryParams;
        var reachedEnd: Boolean;
        if(responseObject.body?.page?.hasOwnProperty('nextCursor')){
            var queryParam: any = {
                afterCursor: '',
                limit: 20
            };
            [queryParam, reachedEnd]  = this.getCursorQueryParam(responseObject, queryParam);
        }
        else{
            var queryParam: any = {
                offset: '',
                limit: 20
            };
            [queryParam, reachedEnd] = this.getoffsetQueryParam(responseObject, queryParam);
        }
        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.list(queryParam);
        }
        let dataList = new finixList<any>(nextFetch);
        dataList = await this.embeddedHelper(responseObject, dataList);
        dataList.hasMore = !reachedEnd;
        return Promise.resolve({response: responseObject.response, body: dataList});
    }
    /**
     * Helper function. 
     * If successfully captured, the `transfer` field of the `Authorization` will contain the ID of the `Transfer` resource that\'ll move funds.   By default, `Transfers` are in a **PENDING** state. The **PENDING** state means the system hasn\'t submitted the request to capture funds. Capture requests get submitted via a batch request.   Once the `Authorization` is updated with a `capture_amount` (i.e. *Captured*), the state of the `Transfer` will update to **SUCCEEDED**.  > Voided `Authorizations` can\'t be captured.
     * @summary Update an Authorization
     * @param authorizationId ID of authorization to fetch
     * @param updateAuthorizationRequest 
     */

    private async updateHelper(authorizationId: string, updateAuthorizationRequest?: UpdateAuthorizationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Authorization;  }> {
        const localVarPath = this.basePath + '/authorizations/{authorization_id}'
            .replace('{' + 'authorization_id' + '}', encodeURIComponent(String(authorizationId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'authorizationId' is not null or undefined
        if (authorizationId === null || authorizationId === undefined) {
            throw new Error('Required parameter authorizationId was null or undefined when calling updateAuthorization.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (updateAuthorizationRequest != undefined && updateAuthorizationRequest != null && updateAuthorizationRequest.hasOwnProperty('file')){
            localVarRequestOptions.formData = updateAuthorizationRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(updateAuthorizationRequest, "UpdateAuthorizationRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Authorization;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Authorization");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * If successfully captured, the `transfer` field of the `Authorization` will contain the ID of the `Transfer` resource that\'ll move funds.   By default, `Transfers` are in a **PENDING** state. The **PENDING** state means the system hasn\'t submitted the request to capture funds. Capture requests get submitted via a batch request.   Once the `Authorization` is updated with a `capture_amount` (i.e. *Captured*), the state of the `Transfer` will update to **SUCCEEDED**.  > Voided `Authorizations` can\'t be captured.
     * @summary Update an Authorization
     * @param authorizationId ID of authorization to fetch
     * @param updateAuthorizationRequest 
     */
    public async update(authorizationId: string, updateAuthorizationRequest?: UpdateAuthorizationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Authorization> {
        const responseObject = await this.updateHelper(authorizationId, updateAuthorizationRequest,  options);
        return responseObject.body;
    }

    /**
     * If successfully captured, the `transfer` field of the `Authorization` will contain the ID of the `Transfer` resource that\'ll move funds.   By default, `Transfers` are in a **PENDING** state. The **PENDING** state means the system hasn\'t submitted the request to capture funds. Capture requests get submitted via a batch request.   Once the `Authorization` is updated with a `capture_amount` (i.e. *Captured*), the state of the `Transfer` will update to **SUCCEEDED**.  > Voided `Authorizations` can\'t be captured.
     * @summary Update an Authorization
     * @param authorizationId ID of authorization to fetch
     * @param updateAuthorizationRequest 
     */
    public async updateHttp(authorizationId: string, updateAuthorizationRequest?: UpdateAuthorizationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Authorization; }> {
        const responseObject = await this.updateHelper(authorizationId, updateAuthorizationRequest,  options);
        return responseObject;
    }


    private async embeddedHelper(responseObject: any, dataList: finixList<any>){
        if(responseObject.body.embedded == null || responseObject.body.embedded == undefined){
            // const dataList = new finixList<any>();
            dataList.page = responseObject.body.page;
            dataList.links = responseObject.body.links;
            return dataList;
        }
        const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
        let tempList = <finixList<any>> responseObject.body.embedded[embeddedName];
        // const dataList = new finixList<any>();
        tempList.forEach(item => {dataList.add(item)});
        dataList.page = responseObject.body.page;
        dataList.links = responseObject.body.links;
        return dataList;
    }

    private getoffsetQueryParam(responseObject: any, queryParam: any){
        queryParam.offset = responseObject.body.page.offset;
        var endReached: Boolean = false;
        if (responseObject.body.page.offset + responseObject.body.page.limit > responseObject.body.page.count){
            endReached = true;
        }
        return [queryParam, endReached];
    }

    private getCursorQueryParam(responseObject: any, queryParam: any){
        queryParam.afterCursor = responseObject.body.page.nextCursor;
        var endReached: Boolean = false;
        if (responseObject.body.page.nextCursor == undefined){
            endReached = true;
        }
        return [queryParam, endReached];
    }
}   
