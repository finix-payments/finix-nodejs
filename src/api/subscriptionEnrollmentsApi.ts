/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import * as http from 'http';
import * as fs from 'fs';
/* tslint:disable:no-unused-locals */
import { CreateSubscriptionEnrollmentRequest } from '../model/createSubscriptionEnrollmentRequest';
import { Error401Unauthorized } from '../model/error401Unauthorized';
import { Error403ForbiddenList } from '../model/error403ForbiddenList';
import { Error404NotFoundList } from '../model/error404NotFoundList';
import { Error406NotAcceptable } from '../model/error406NotAcceptable';
import { SubscriptionEnrollment } from '../model/subscriptionEnrollment';
import { SubscriptionEnrollmentList } from '../model/subscriptionEnrollmentList';
import { UpdateSubscriptionEnrollmentRequest } from '../model/updateSubscriptionEnrollmentRequest';
import { ListSubscriptionEnrollmentsQueryParams } from '../model/listSubscriptionEnrollmentsQueryParams';
import { ListSubscriptionEnrollmentsInScheduleQueryParams } from '../model/listSubscriptionEnrollmentsInScheduleQueryParams';
import { ObjectSerializer, Authentication, VoidAuth, Interceptor, SuperSet } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://finix.sandbox-payments-api.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SubscriptionEnrollmentsApiApiKeys {
}

export class SubscriptionEnrollmentsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'BasicAuth': new HttpBasicAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: SubscriptionEnrollmentsApiApiKeys, value: string) {
        (this.authentications as any)[SubscriptionEnrollmentsApiApiKeys[key]].apiKey = value;
    }

    set username(username: string) {
        this.authentications.BasicAuth.username = username;
    }

    set password(password: string) {
        this.authentications.BasicAuth.password = password;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Helper function. 
     * Create a `subscription_enrollment`.  A `subscription_enrollment` details which `Merchant` gets charged, to what schedule, and when the subscription will start. The `subscription_enrollment` must be associated with a `Subscription Schedule`.
     * @summary Create a Subscription Enrollment
     * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
     * @param createSubscriptionEnrollmentRequest 
     */

    private async createHelper(subscriptionScheduleId: string, createSubscriptionEnrollmentRequest?: CreateSubscriptionEnrollmentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollment;  }> {
        const localVarPath = this.basePath + '/subscription/subscription_schedules/{subscription_schedule_id}/subscription_enrollments'
            .replace('{' + 'subscription_schedule_id' + '}', encodeURIComponent(String(subscriptionScheduleId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'subscriptionScheduleId' is not null or undefined
        if (subscriptionScheduleId === null || subscriptionScheduleId === undefined) {
            throw new Error('Required parameter subscriptionScheduleId was null or undefined when calling createSubscriptionEnrollments.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (createSubscriptionEnrollmentRequest.hasOwnProperty('file')){
            createSubscriptionEnrollmentRequest = await this.fileHelper(createSubscriptionEnrollmentRequest);
            localVarRequestOptions.formData = createSubscriptionEnrollmentRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(createSubscriptionEnrollmentRequest, "CreateSubscriptionEnrollmentRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SubscriptionEnrollment");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Create a `subscription_enrollment`.  A `subscription_enrollment` details which `Merchant` gets charged, to what schedule, and when the subscription will start. The `subscription_enrollment` must be associated with a `Subscription Schedule`.
     * @summary Create a Subscription Enrollment
     * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
     * @param createSubscriptionEnrollmentRequest 
     */

    public async create(subscriptionScheduleId: string, createSubscriptionEnrollmentRequest?: CreateSubscriptionEnrollmentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<SubscriptionEnrollment> {
        const responseObject = await this.createHelper(subscriptionScheduleId, createSubscriptionEnrollmentRequest,  options);
        return responseObject.body;
    }

    /**
     * Create a `subscription_enrollment`.  A `subscription_enrollment` details which `Merchant` gets charged, to what schedule, and when the subscription will start. The `subscription_enrollment` must be associated with a `Subscription Schedule`.
     * @summary Create a Subscription Enrollment
     * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
     * @param createSubscriptionEnrollmentRequest 
     */

    public async createHttp(subscriptionScheduleId: string, createSubscriptionEnrollmentRequest?: CreateSubscriptionEnrollmentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: SubscriptionEnrollment; }> {
        const responseObject = await this.createHelper(subscriptionScheduleId, createSubscriptionEnrollmentRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Remove a `subscription_enrollment`.
     * @summary Delete a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     */

    private async removeHelper(subscriptionEnrollmentId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/subscription/subscription_enrollments/{subscription_enrollment_id}'
            .replace('{' + 'subscription_enrollment_id' + '}', encodeURIComponent(String(subscriptionEnrollmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'subscriptionEnrollmentId' is not null or undefined
        if (subscriptionEnrollmentId === null || subscriptionEnrollmentId === undefined) {
            throw new Error('Required parameter subscriptionEnrollmentId was null or undefined when calling deleteSubscriptionEnrollment.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Remove a `subscription_enrollment`.
     * @summary Delete a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     */

    public async remove(subscriptionEnrollmentId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<any> {
        const responseObject = await this.removeHelper(subscriptionEnrollmentId,  options);
        return responseObject.body;
    }

    /**
     * Remove a `subscription_enrollment`.
     * @summary Delete a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     */

    public async removeHttp(subscriptionEnrollmentId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body?: any; }> {
        const responseObject = await this.removeHelper(subscriptionEnrollmentId,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Retrieve the details of a `subscription_enrollment`.
     * @summary Get a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param merchant Filter by the objects &#x60;merchant&#x60; ID.
     */

    private async getHelper(subscriptionEnrollmentId: string, merchant?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollment;  }> {
        const localVarPath = this.basePath + '/subscription/subscription_enrollments/{subscription_enrollment_id}'
            .replace('{' + 'subscription_enrollment_id' + '}', encodeURIComponent(String(subscriptionEnrollmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'subscriptionEnrollmentId' is not null or undefined
        if (subscriptionEnrollmentId === null || subscriptionEnrollmentId === undefined) {
            throw new Error('Required parameter subscriptionEnrollmentId was null or undefined when calling getSubscriptionEnrollment.');
        }

        if (merchant !== undefined) {
            localVarQueryParameters['merchant'] = ObjectSerializer.serialize(merchant, "string");
        }
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SubscriptionEnrollment");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve the details of a `subscription_enrollment`.
     * @summary Get a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param merchant Filter by the objects &#x60;merchant&#x60; ID.
     */

    public async get(subscriptionEnrollmentId: string, merchant?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<SubscriptionEnrollment> {
        const responseObject = await this.getHelper(subscriptionEnrollmentId, merchant,  options);
        return responseObject.body;
    }

    /**
     * Retrieve the details of a `subscription_enrollment`.
     * @summary Get a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param merchant Filter by the objects &#x60;merchant&#x60; ID.
     */

    public async getHttp(subscriptionEnrollmentId: string, merchant?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: SubscriptionEnrollment; }> {
        const responseObject = await this.getHelper(subscriptionEnrollmentId, merchant,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Retrieve a list of `Subscription Enrollments`.
     * @summary List Subscription Enrollments

    */
    private async listHelper (listSubscriptionEnrollmentsQueryParams?:ListSubscriptionEnrollmentsQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollmentList;  }> {
        const localVarPath = this.basePath + '/subscription/subscription_enrollments';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (listSubscriptionEnrollmentsQueryParams != undefined){ 

        }
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollmentList;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SubscriptionEnrollmentList");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve a list of `Subscription Enrollments`.
     * @summary List Subscription Enrollments

    */
    public async list (listSubscriptionEnrollmentsQueryParams?:ListSubscriptionEnrollmentsQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<SuperSet<any>> {
        const responseObject = await this.listHelper(listSubscriptionEnrollmentsQueryParams, options);

        let dataList = await this.embeddedHelper(responseObject);
        return dataList;
    }

    /**
     * Retrieve a list of `Subscription Enrollments`.
     * @summary List Subscription Enrollments

    */
    public async listHttp (listSubscriptionEnrollmentsQueryParams?:ListSubscriptionEnrollmentsQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, body: SuperSet<any>}> {
        const responseObject = await this.listHelper(listSubscriptionEnrollmentsQueryParams, options);

        let dataList = await this.embeddedHelper(responseObject);
        return Promise.resolve({response: responseObject.response, body: dataList});
    }
    /**
     * Helper function. 
     * Retrieve a list of `Subscription Enrollments` for a specific `subscription_schedule`.
     * @summary List Subscription Enrollments on a Schedule

    * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
    * 
    */
    private async listBySubscriptionScheduleIdHelper (subscriptionScheduleId: string, listSubscriptionEnrollmentsInScheduleQueryParams?:ListSubscriptionEnrollmentsInScheduleQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollmentList;  }> {
        const localVarPath = this.basePath + '/subscription/subscription_schedules/{subscription_schedule_id}/subscription_enrollments'
            .replace('{' + 'subscription_schedule_id' + '}', encodeURIComponent(String(subscriptionScheduleId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'subscriptionScheduleId' is not null or undefined
        if (subscriptionScheduleId === null || subscriptionScheduleId === undefined) {
            throw new Error('Required parameter subscriptionScheduleId was null or undefined when calling listSubscriptionEnrollmentsInSchedule.');
        }
        if (listSubscriptionEnrollmentsInScheduleQueryParams != undefined){ 

        }
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollmentList;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SubscriptionEnrollmentList");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve a list of `Subscription Enrollments` for a specific `subscription_schedule`.
     * @summary List Subscription Enrollments on a Schedule

    * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
    * 
    */
    public async listBySubscriptionScheduleId (subscriptionScheduleId: string, listSubscriptionEnrollmentsInScheduleQueryParams?:ListSubscriptionEnrollmentsInScheduleQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<SuperSet<any>> {
        const responseObject = await this.listBySubscriptionScheduleIdHelper(subscriptionScheduleId, listSubscriptionEnrollmentsInScheduleQueryParams, options);

        let dataList = await this.embeddedHelper(responseObject);
        return dataList;
    }

    /**
     * Retrieve a list of `Subscription Enrollments` for a specific `subscription_schedule`.
     * @summary List Subscription Enrollments on a Schedule

    * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
    * 
    */
    public async listBySubscriptionScheduleIdHttp (subscriptionScheduleId: string, listSubscriptionEnrollmentsInScheduleQueryParams?:ListSubscriptionEnrollmentsInScheduleQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, body: SuperSet<any>}> {
        const responseObject = await this.listBySubscriptionScheduleIdHelper(subscriptionScheduleId, listSubscriptionEnrollmentsInScheduleQueryParams, options);

        let dataList = await this.embeddedHelper(responseObject);
        return Promise.resolve({response: responseObject.response, body: dataList});
    }
    /**
     * Helper function. 
     * Update the details of a `subscription_enrollment`.
     * @summary Update a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param updateSubscriptionEnrollmentRequest 
     */

    private async updateHelper(subscriptionEnrollmentId: string, updateSubscriptionEnrollmentRequest?: UpdateSubscriptionEnrollmentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollment;  }> {
        const localVarPath = this.basePath + '/subscription/subscription_enrollments/{subscription_enrollment_id}'
            .replace('{' + 'subscription_enrollment_id' + '}', encodeURIComponent(String(subscriptionEnrollmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'subscriptionEnrollmentId' is not null or undefined
        if (subscriptionEnrollmentId === null || subscriptionEnrollmentId === undefined) {
            throw new Error('Required parameter subscriptionEnrollmentId was null or undefined when calling updateSubscriptionEnrollment.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (updateSubscriptionEnrollmentRequest.hasOwnProperty('file')){
            updateSubscriptionEnrollmentRequest = await this.fileHelper(updateSubscriptionEnrollmentRequest);
            localVarRequestOptions.formData = updateSubscriptionEnrollmentRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(updateSubscriptionEnrollmentRequest, "UpdateSubscriptionEnrollmentRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SubscriptionEnrollment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SubscriptionEnrollment");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Update the details of a `subscription_enrollment`.
     * @summary Update a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param updateSubscriptionEnrollmentRequest 
     */

    public async update(subscriptionEnrollmentId: string, updateSubscriptionEnrollmentRequest?: UpdateSubscriptionEnrollmentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<SubscriptionEnrollment> {
        const responseObject = await this.updateHelper(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest,  options);
        return responseObject.body;
    }

    /**
     * Update the details of a `subscription_enrollment`.
     * @summary Update a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param updateSubscriptionEnrollmentRequest 
     */

    public async updateHttp(subscriptionEnrollmentId: string, updateSubscriptionEnrollmentRequest?: UpdateSubscriptionEnrollmentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: SubscriptionEnrollment; }> {
        const responseObject = await this.updateHelper(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest,  options);
        return responseObject;
    }


    private async embeddedHelper(responseObject: any){
        const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
        let dataList = <SuperSet<any>> responseObject.body.embedded[embeddedName];
        dataList.page = responseObject.body.page;
        dataList.links = responseObject.body.links;
        return dataList;
    }

    private async fileHelper(request: any){
        request.file = fs.createReadStream(<string>request.file)
        return request;
    }
}
