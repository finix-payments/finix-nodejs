"use strict";
/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BalanceTransfersApi = exports.BalanceTransfersApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const models_2 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://finix.sandbox-payments-api.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var BalanceTransfersApiApiKeys;
(function (BalanceTransfersApiApiKeys) {
})(BalanceTransfersApiApiKeys = exports.BalanceTransfersApiApiKeys || (exports.BalanceTransfersApiApiKeys = {}));
class BalanceTransfersApi {
    _basePath = defaultBasePath;
    _defaultHeaders = {};
    _useQuerystring = false;
    authentications = {
        'default': new models_1.VoidAuth(),
        'BasicAuth': new models_2.HttpBasicAuth(),
    };
    interceptors = [];
    constructor(basePathOrUsername, password, basePath) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[BalanceTransfersApiApiKeys[key]].apiKey = value;
    }
    set username(username) {
        this.authentications.BasicAuth.username = username;
    }
    set password(password) {
        this.authentications.BasicAuth.password = password;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Helper function.
     * Create a `balance_transfer`.
     * @summary Create a Balance Transfer
     * @param createBalanceTransferRequest
     */
    async createBalanceTransferHelper(createBalanceTransferRequest, options = { headers: {} }) {
        const localVarPath = this.basePath + '/balance_transfers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(createBalanceTransferRequest, "CreateBalanceTransferRequest")
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "BalanceTransfer");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a `balance_transfer`.
     * @summary Create a Balance Transfer
     * @param createBalanceTransferRequest
     */
    async createBalanceTransfer(createBalanceTransferRequest, options = { headers: {} }, httpData = false) {
        const responseObject = await this.createBalanceTransferHelper(createBalanceTransferRequest, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            if (httpData) {
                return Promise.resolve({ response: responseObject.response, body: dataList });
            }
            return dataList;
        }
        if (httpData) {
            return responseObject;
        }
        return responseObject.body;
    }
    /**
     * Helper function.
     * Retrieve the details of a `balance_transfer`.
     * @summary Get a Balance Transfer
     * @param balanceTransfersId ID of the &#x60;balance_transfer&#x60; resource.
     */
    async getBalanceTransfersHelper(balanceTransfersId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/balance_transfers/{balance_transfers_id}'
            .replace('{' + 'balance_transfers_id' + '}', encodeURIComponent(String(balanceTransfersId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'balanceTransfersId' is not null or undefined
        if (balanceTransfersId === null || balanceTransfersId === undefined) {
            throw new Error('Required parameter balanceTransfersId was null or undefined when calling getBalanceTransfers.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "BalanceTransfer");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the details of a `balance_transfer`.
     * @summary Get a Balance Transfer
     * @param balanceTransfersId ID of the &#x60;balance_transfer&#x60; resource.
     */
    async getBalanceTransfers(balanceTransfersId, options = { headers: {} }, httpData = false) {
        const responseObject = await this.getBalanceTransfersHelper(balanceTransfersId, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            if (httpData) {
                return Promise.resolve({ response: responseObject.response, body: dataList });
            }
            return dataList;
        }
        if (httpData) {
            return responseObject;
        }
        return responseObject.body;
    }
    /**
     * Helper function.
     * Retrieve a list of `balance_transfers`.
     * @summary List Balance Transfers

    */
    async listBalanceTransfersHelper(listBalanceTransfersQueryParams, options = { headers: {} }) {
        const localVarPath = this.basePath + '/balance_transfers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        if (listBalanceTransfersQueryParams != undefined) {
            if (listBalanceTransfersQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.limit, "number");
            }
            if (listBalanceTransfersQueryParams.offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.offset, "number");
            }
            if (listBalanceTransfersQueryParams.pageNumber !== undefined) {
                localVarQueryParameters['pageNumber'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.pageNumber, "number");
            }
            if (listBalanceTransfersQueryParams.pageSize !== undefined) {
                localVarQueryParameters['pageSize'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.pageSize, "number");
            }
            if (listBalanceTransfersQueryParams.createdAtGte !== undefined) {
                localVarQueryParameters['created_at.gte'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.createdAtGte, "string");
            }
            if (listBalanceTransfersQueryParams.createdAtLte !== undefined) {
                localVarQueryParameters['created_at.lte'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.createdAtLte, "string");
            }
            if (listBalanceTransfersQueryParams.updatedAtGte !== undefined) {
                localVarQueryParameters['updated_at.gte'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.updatedAtGte, "string");
            }
            if (listBalanceTransfersQueryParams.updatedAtLte !== undefined) {
                localVarQueryParameters['updated_at.lte'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.updatedAtLte, "string");
            }
            if (listBalanceTransfersQueryParams.idempotencyId !== undefined) {
                localVarQueryParameters['idempotency_id'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.idempotencyId, "string");
            }
            if (listBalanceTransfersQueryParams.amount !== undefined) {
                localVarQueryParameters['amount'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.amount, "number");
            }
            if (listBalanceTransfersQueryParams.description !== undefined) {
                localVarQueryParameters['description'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.description, "string");
            }
            if (listBalanceTransfersQueryParams.destination !== undefined) {
                localVarQueryParameters['destination'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.destination, "string");
            }
            if (listBalanceTransfersQueryParams.externalReferenceId !== undefined) {
                localVarQueryParameters['external_reference_id'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.externalReferenceId, "string");
            }
            if (listBalanceTransfersQueryParams.referenceId !== undefined) {
                localVarQueryParameters['reference_id'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.referenceId, "string");
            }
            if (listBalanceTransfersQueryParams.source !== undefined) {
                localVarQueryParameters['source'] = models_1.ObjectSerializer.serialize(listBalanceTransfersQueryParams.source, "string");
            }
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "BalanceTransferList");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a list of `balance_transfers`.
     * @summary List Balance Transfers

    */
    async listBalanceTransfers(listBalanceTransfersQueryParams, options = { headers: {} }, httpData = false) {
        const responseObject = await this.listBalanceTransfersHelper(listBalanceTransfersQueryParams, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            if (httpData) {
                return Promise.resolve({ response: responseObject.response, body: dataList });
            }
            return dataList;
        }
        if (httpData) {
            return responseObject;
        }
        return responseObject.body;
    }
    async embeddedHelper(responseObject) {
        const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
        let dataList = responseObject.body.embedded[embeddedName];
        dataList.page = responseObject.body.page;
        dataList.links = responseObject.body.links;
        return dataList;
    }
}
exports.BalanceTransfersApi = BalanceTransfersApi;
//# sourceMappingURL=balanceTransfersApi.js.map