"use strict";
/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentitiesApi = exports.IdentitiesApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const models_2 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://finix.sandbox-payments-api.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var IdentitiesApiApiKeys;
(function (IdentitiesApiApiKeys) {
})(IdentitiesApiApiKeys = exports.IdentitiesApiApiKeys || (exports.IdentitiesApiApiKeys = {}));
class IdentitiesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'BasicAuth': new models_2.HttpBasicAuth(),
        };
        this.interceptors = [];
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[IdentitiesApiApiKeys[key]].apiKey = value;
    }
    set username(username) {
        this.authentications.BasicAuth.username = username;
    }
    set password(password) {
        this.authentications.BasicAuth.password = password;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Helper function.
     * Create an associated `Identity` for [every owner with 25% or more ownership](/guides/onboarding/#step-3-add-associated-identities) over the merchant.
     * @summary Create an Associated Identity
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * @param createIdentityRequest
     */
    createAssociatedIdentityHelper(identityId, createIdentityRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/identities/{identity_id}/associated_identities'
                .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'identityId' is not null or undefined
            if (identityId === null || identityId === undefined) {
                throw new Error('Required parameter identityId was null or undefined when calling createAssociatedIdentity.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            localVarHeaderParams['Content-Type'] = "application/hal+json";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (createIdentityRequest != undefined && createIdentityRequest != null && createIdentityRequest.hasOwnProperty('file')) {
                localVarRequestOptions.formData = createIdentityRequest;
            }
            else {
                localVarRequestOptions.body = models_1.ObjectSerializer.serialize(createIdentityRequest, "CreateIdentityRequest");
            }
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Identity");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Create an associated `Identity` for [every owner with 25% or more ownership](/guides/onboarding/#step-3-add-associated-identities) over the merchant.
     * @summary Create an Associated Identity
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * @param createIdentityRequest
     */
    createAssociatedIdentity(identityId, createIdentityRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createAssociatedIdentityHelper(identityId, createIdentityRequest, options);
            return responseObject.body;
        });
    }
    /**
     * Create an associated `Identity` for [every owner with 25% or more ownership](/guides/onboarding/#step-3-add-associated-identities) over the merchant.
     * @summary Create an Associated Identity
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * @param createIdentityRequest
     */
    createAssociatedIdentityHttp(identityId, createIdentityRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createAssociatedIdentityHelper(identityId, createIdentityRequest, options);
            return responseObject;
        });
    }
    /**
     * Helper function.
     * Create an `Identity` for your merchant or buyer.  Creating `Identities` for merchants requires they provide [KYC details](/docs/guides/getting-started/).  Related Guides: [Getting Started](/docs/guides/getting-started/), [Onboarding](/docs/guides/onboarding/)
     * @summary Create an Identity
     * @param createIdentityRequest
     */
    createHelper(createIdentityRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/identities';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            localVarHeaderParams['Content-Type'] = "application/hal+json";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (createIdentityRequest != undefined && createIdentityRequest != null && createIdentityRequest.hasOwnProperty('file')) {
                localVarRequestOptions.formData = createIdentityRequest;
            }
            else {
                localVarRequestOptions.body = models_1.ObjectSerializer.serialize(createIdentityRequest, "CreateIdentityRequest");
            }
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Identity");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Create an `Identity` for your merchant or buyer.  Creating `Identities` for merchants requires they provide [KYC details](/docs/guides/getting-started/).  Related Guides: [Getting Started](/docs/guides/getting-started/), [Onboarding](/docs/guides/onboarding/)
     * @summary Create an Identity
     * @param createIdentityRequest
     */
    create(createIdentityRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createHelper(createIdentityRequest, options);
            return responseObject.body;
        });
    }
    /**
     * Create an `Identity` for your merchant or buyer.  Creating `Identities` for merchants requires they provide [KYC details](/docs/guides/getting-started/).  Related Guides: [Getting Started](/docs/guides/getting-started/), [Onboarding](/docs/guides/onboarding/)
     * @summary Create an Identity
     * @param createIdentityRequest
     */
    createHttp(createIdentityRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createHelper(createIdentityRequest, options);
            return responseObject;
        });
    }
    /**
     * Helper function.
     * Verify an `Identity`.
     * @summary Verify an Identity
     * @param identityId ID of identity to fetch
     * @param createVerificationRequest
     */
    createIdentityVerificationHelper(identityId, createVerificationRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/identities/{identity_id}/verifications'
                .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'identityId' is not null or undefined
            if (identityId === null || identityId === undefined) {
                throw new Error('Required parameter identityId was null or undefined when calling createIdentityVerification.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            localVarHeaderParams['Content-Type'] = "application/hal+json";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (createVerificationRequest != undefined && createVerificationRequest != null && createVerificationRequest.hasOwnProperty('file')) {
                localVarRequestOptions.formData = createVerificationRequest;
            }
            else {
                localVarRequestOptions.body = models_1.ObjectSerializer.serialize(createVerificationRequest, "CreateVerificationRequest");
            }
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Verification");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Verify an `Identity`.
     * @summary Verify an Identity
     * @param identityId ID of identity to fetch
     * @param createVerificationRequest
     */
    createIdentityVerification(identityId, createVerificationRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createIdentityVerificationHelper(identityId, createVerificationRequest, options);
            return responseObject.body;
        });
    }
    /**
     * Verify an `Identity`.
     * @summary Verify an Identity
     * @param identityId ID of identity to fetch
     * @param createVerificationRequest
     */
    createIdentityVerificationHttp(identityId, createVerificationRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createIdentityVerificationHelper(identityId, createVerificationRequest, options);
            return responseObject;
        });
    }
    /**
     * Helper function.
     * Retrieve the details of a previously created `Identity`.
     * @summary Fetch an Identity
     * @param identityId ID of the &#x60;identity&#x60; to fetch
     */
    getHelper(identityId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/identities/{identity_id}'
                .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'identityId' is not null or undefined
            if (identityId === null || identityId === undefined) {
                throw new Error('Required parameter identityId was null or undefined when calling getIdentity.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Identity");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Retrieve the details of a previously created `Identity`.
     * @summary Fetch an Identity
     * @param identityId ID of the &#x60;identity&#x60; to fetch
     */
    get(identityId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.getHelper(identityId, options);
            return responseObject.body;
        });
    }
    /**
     * Retrieve the details of a previously created `Identity`.
     * @summary Fetch an Identity
     * @param identityId ID of the &#x60;identity&#x60; to fetch
     */
    getHttp(identityId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.getHelper(identityId, options);
            return responseObject;
        });
    }
    /**
     * Helper function.
     * Retrieves a list of `Identities`.
     * @summary List Identities

    */
    listHelper(listIdentitiesQueryParams, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/identities';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (listIdentitiesQueryParams != undefined) {
                if (listIdentitiesQueryParams.sort !== undefined) {
                    localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.sort, "string");
                }
                if (listIdentitiesQueryParams.afterCursor !== undefined) {
                    localVarQueryParameters['after_cursor'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.afterCursor, "string");
                }
                if (listIdentitiesQueryParams.limit !== undefined) {
                    localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.limit, "number");
                }
                if (listIdentitiesQueryParams.id !== undefined) {
                    localVarQueryParameters['id'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.id, "string");
                }
                if (listIdentitiesQueryParams.createdAtGte !== undefined) {
                    localVarQueryParameters['created_at.gte'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.createdAtGte, "string");
                }
                if (listIdentitiesQueryParams.createdAtLte !== undefined) {
                    localVarQueryParameters['created_at.lte'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.createdAtLte, "string");
                }
                if (listIdentitiesQueryParams.defaultStatementDescriptor !== undefined) {
                    localVarQueryParameters['default_statement_descriptor'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.defaultStatementDescriptor, "string");
                }
                if (listIdentitiesQueryParams.businessName !== undefined) {
                    localVarQueryParameters['business_name'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.businessName, "string");
                }
                if (listIdentitiesQueryParams.businessType !== undefined) {
                    localVarQueryParameters['business_type'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.businessType, "string");
                }
                if (listIdentitiesQueryParams.email !== undefined) {
                    localVarQueryParameters['email'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.email, "string");
                }
                if (listIdentitiesQueryParams.firstName !== undefined) {
                    localVarQueryParameters['first_name'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.firstName, "string");
                }
                if (listIdentitiesQueryParams.lastName !== undefined) {
                    localVarQueryParameters['last_name'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.lastName, "string");
                }
                if (listIdentitiesQueryParams.title !== undefined) {
                    localVarQueryParameters['title'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.title, "string");
                }
                if (listIdentitiesQueryParams.beforeCursor !== undefined) {
                    localVarQueryParameters['before_cursor'] = models_1.ObjectSerializer.serialize(listIdentitiesQueryParams.beforeCursor, "string");
                }
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "IdentitiesList");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Retrieves a list of `Identities`.
     * @summary List Identities
     */
    list(listIdentitiesQueryParams, options = { headers: {} }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listHelper(listIdentitiesQueryParams, options);
            // var queryParam: ListIdentitiesQueryParams;
            var reachedEnd;
            if ((_b = (_a = responseObject.body) === null || _a === void 0 ? void 0 : _a.page) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('nextCursor')) {
                var queryParam = {
                    afterCursor: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getCursorQueryParam(responseObject, queryParam);
            }
            else {
                var queryParam = {
                    offset: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getoffsetQueryParam(responseObject, queryParam);
            }
            const nextFetch = (limit) => {
                queryParam.limit = limit;
                if (reachedEnd) {
                    throw new RangeError("End of list reached");
                }
                return this.list(queryParam);
            };
            let dataList = new models_1.finixList(nextFetch);
            dataList = yield this.embeddedHelper(responseObject, dataList);
            dataList.hasMore = !reachedEnd;
            return dataList;
        });
    }
    /**
     * Retrieves a list of `Identities`.
     * @summary List Identities
     */
    listHttp(listIdentitiesQueryParams, options = { headers: {} }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listHelper(listIdentitiesQueryParams, options);
            //var queryParam: ListIdentitiesQueryParams;
            var reachedEnd;
            if ((_b = (_a = responseObject.body) === null || _a === void 0 ? void 0 : _a.page) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('nextCursor')) {
                var queryParam = {
                    afterCursor: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getCursorQueryParam(responseObject, queryParam);
            }
            else {
                var queryParam = {
                    offset: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getoffsetQueryParam(responseObject, queryParam);
            }
            const nextFetch = (limit) => {
                queryParam.limit = limit;
                if (reachedEnd) {
                    throw new RangeError("End of list reached");
                }
                return this.list(queryParam);
            };
            let dataList = new models_1.finixList(nextFetch);
            dataList = yield this.embeddedHelper(responseObject, dataList);
            dataList.hasMore = !reachedEnd;
            return Promise.resolve({ response: responseObject.response, body: dataList });
        });
    }
    /**
     * Helper function.
     * Retrieve a list of `Associated Identities` for an `Identity`.
     * @summary List Associated Identities

    * @param identityId ID of &#x60;Identity&#x60; to associate object with.
    *
    */
    listAssocaiatedIdentitiesHelper(identityId, listIdentityAssociatedIdentitiesQueryParams, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/identities/{identity_id}/associated_identities'
                .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'identityId' is not null or undefined
            if (identityId === null || identityId === undefined) {
                throw new Error('Required parameter identityId was null or undefined when calling listIdentityAssociatedIdentities.');
            }
            if (listIdentityAssociatedIdentitiesQueryParams != undefined) {
                if (listIdentityAssociatedIdentitiesQueryParams.limit !== undefined) {
                    localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(listIdentityAssociatedIdentitiesQueryParams.limit, "number");
                }
                if (listIdentityAssociatedIdentitiesQueryParams.afterCursor !== undefined) {
                    localVarQueryParameters['after_cursor'] = models_1.ObjectSerializer.serialize(listIdentityAssociatedIdentitiesQueryParams.afterCursor, "string");
                }
                if (listIdentityAssociatedIdentitiesQueryParams.beforeCursor !== undefined) {
                    localVarQueryParameters['before_cursor'] = models_1.ObjectSerializer.serialize(listIdentityAssociatedIdentitiesQueryParams.beforeCursor, "string");
                }
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "IdentitiesList");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Retrieve a list of `Associated Identities` for an `Identity`.
     * @summary List Associated Identities
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     *
     */
    listAssocaiatedIdentities(identityId, listIdentityAssociatedIdentitiesQueryParams, options = { headers: {} }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listAssocaiatedIdentitiesHelper(identityId, listIdentityAssociatedIdentitiesQueryParams, options);
            // var queryParam: ListIdentityAssociatedIdentitiesQueryParams;
            var reachedEnd;
            if ((_b = (_a = responseObject.body) === null || _a === void 0 ? void 0 : _a.page) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('nextCursor')) {
                var queryParam = {
                    afterCursor: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getCursorQueryParam(responseObject, queryParam);
            }
            else {
                var queryParam = {
                    offset: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getoffsetQueryParam(responseObject, queryParam);
            }
            const nextFetch = (limit) => {
                queryParam.limit = limit;
                if (reachedEnd) {
                    throw new RangeError("End of list reached");
                }
                return this.listAssocaiatedIdentities(identityId, queryParam);
            };
            let dataList = new models_1.finixList(nextFetch);
            dataList = yield this.embeddedHelper(responseObject, dataList);
            dataList.hasMore = !reachedEnd;
            return dataList;
        });
    }
    /**
     * Retrieve a list of `Associated Identities` for an `Identity`.
     * @summary List Associated Identities
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     *
     */
    listAssocaiatedIdentitiesHttp(identityId, listIdentityAssociatedIdentitiesQueryParams, options = { headers: {} }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listAssocaiatedIdentitiesHelper(identityId, listIdentityAssociatedIdentitiesQueryParams, options);
            //var queryParam: ListIdentityAssociatedIdentitiesQueryParams;
            var reachedEnd;
            if ((_b = (_a = responseObject.body) === null || _a === void 0 ? void 0 : _a.page) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('nextCursor')) {
                var queryParam = {
                    afterCursor: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getCursorQueryParam(responseObject, queryParam);
            }
            else {
                var queryParam = {
                    offset: '',
                    limit: 20
                };
                [queryParam, reachedEnd] = this.getoffsetQueryParam(responseObject, queryParam);
            }
            const nextFetch = (limit) => {
                queryParam.limit = limit;
                if (reachedEnd) {
                    throw new RangeError("End of list reached");
                }
                return this.listAssocaiatedIdentities(identityId, queryParam);
            };
            let dataList = new models_1.finixList(nextFetch);
            dataList = yield this.embeddedHelper(responseObject, dataList);
            dataList.hasMore = !reachedEnd;
            return Promise.resolve({ response: responseObject.response, body: dataList });
        });
    }
    /**
     * Helper function.
     * Update an existing `Identity`.  If you are updating the `Identity` of a `Merchant` that’s already been onboarded, you need to [verify the merchant again](#operation/createMerchantVerification).
     * @summary Update an Identity
     * @param identityId ID of the &#x60;identity&#x60; to fetch
     * @param updateIdentityRequest
     */
    updateHelper(identityId, updateIdentityRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/identities/{identity_id}'
                .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'identityId' is not null or undefined
            if (identityId === null || identityId === undefined) {
                throw new Error('Required parameter identityId was null or undefined when calling updateIdentity.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            localVarHeaderParams['Content-Type'] = "application/hal+json";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (updateIdentityRequest != undefined && updateIdentityRequest != null && updateIdentityRequest.hasOwnProperty('file')) {
                localVarRequestOptions.formData = updateIdentityRequest;
            }
            else {
                localVarRequestOptions.body = models_1.ObjectSerializer.serialize(updateIdentityRequest, "UpdateIdentityRequest");
            }
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Identity");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Update an existing `Identity`.  If you are updating the `Identity` of a `Merchant` that’s already been onboarded, you need to [verify the merchant again](#operation/createMerchantVerification).
     * @summary Update an Identity
     * @param identityId ID of the &#x60;identity&#x60; to fetch
     * @param updateIdentityRequest
     */
    update(identityId, updateIdentityRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.updateHelper(identityId, updateIdentityRequest, options);
            return responseObject.body;
        });
    }
    /**
     * Update an existing `Identity`.  If you are updating the `Identity` of a `Merchant` that’s already been onboarded, you need to [verify the merchant again](#operation/createMerchantVerification).
     * @summary Update an Identity
     * @param identityId ID of the &#x60;identity&#x60; to fetch
     * @param updateIdentityRequest
     */
    updateHttp(identityId, updateIdentityRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.updateHelper(identityId, updateIdentityRequest, options);
            return responseObject;
        });
    }
    embeddedHelper(responseObject, dataList) {
        return __awaiter(this, void 0, void 0, function* () {
            if (responseObject.body.embedded == null || responseObject.body.embedded == undefined) {
                // const dataList = new finixList<any>();
                dataList.page = responseObject.body.page;
                dataList.links = responseObject.body.links;
                return dataList;
            }
            const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
            let tempList = responseObject.body.embedded[embeddedName];
            // const dataList = new finixList<any>();
            tempList.forEach(item => { dataList.add(item); });
            dataList.page = responseObject.body.page;
            dataList.links = responseObject.body.links;
            return dataList;
        });
    }
    getoffsetQueryParam(responseObject, queryParam) {
        queryParam.offset = responseObject.body.page.offset;
        var endReached = false;
        if (responseObject.body.page.offset + responseObject.body.page.limit > responseObject.body.page.count) {
            endReached = true;
        }
        return [queryParam, endReached];
    }
    getCursorQueryParam(responseObject, queryParam) {
        queryParam.afterCursor = responseObject.body.page.nextCursor;
        var endReached = false;
        if (responseObject.body.page.nextCursor == undefined) {
            endReached = true;
        }
        return [queryParam, endReached];
    }
}
exports.IdentitiesApi = IdentitiesApi;
//# sourceMappingURL=identitiesApi.js.map