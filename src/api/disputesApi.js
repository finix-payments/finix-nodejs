"use strict";
/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisputesApi = exports.DisputesApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const fs = __importStar(require("fs"));
const models_1 = require("../model/models");
const models_2 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://finix.sandbox-payments-api.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DisputesApiApiKeys;
(function (DisputesApiApiKeys) {
})(DisputesApiApiKeys = exports.DisputesApiApiKeys || (exports.DisputesApiApiKeys = {}));
class DisputesApi {
    _basePath = defaultBasePath;
    _defaultHeaders = {};
    _useQuerystring = false;
    authentications = {
        'default': new models_1.VoidAuth(),
        'BasicAuth': new models_2.HttpBasicAuth(),
    };
    interceptors = [];
    constructor(basePathOrUsername, password, basePath) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DisputesApiApiKeys[key]].apiKey = value;
    }
    set username(username) {
        this.authentications.BasicAuth.username = username;
    }
    set password(password) {
        this.authentications.BasicAuth.password = password;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Helper function.
     * Upload dispute evidence for a `Dispute`.  There are four values available for `state` that details the status of the evidence upload:  * **PENDING**: The evidence file has not yet been submitted to the `Processor`. No user action is required. * **SUCCEEDED**: The evidence file has been successfully sent to the `Processor`. No further user action is required. * **CANCELED**: The evidence file upload was not completed due to user action. * **FAILED**: An issue occurred. User action is required. Any of the following issues could have occurred:     * There was an error in the system and the user should retry uploading their evidence file.     * There is an issue with the file and the user should retry uploading a different file.     * There is an issue and the user should contact Support.
     * @summary Create Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
     * @param createDisputeEvidenceRequest
     */
    async createDisputeEvidenceHelper(disputeId, createDisputeEvidenceRequest, options = { headers: {} }) {
        const localVarPath = this.basePath + '/disputes/{dispute_id}/evidence'
            .replace('{' + 'dispute_id' + '}', encodeURIComponent(String(disputeId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'disputeId' is not null or undefined
        if (disputeId === null || disputeId === undefined) {
            throw new Error('Required parameter disputeId was null or undefined when calling createDisputeEvidence.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            // body: ObjectSerializer.serialize(createDisputeEvidenceRequest, "CreateDisputeEvidenceRequest")
            // formData: createDisputeEvidenceRequest
        };
        if (createDisputeEvidenceRequest.hasOwnProperty('file')) {
            createDisputeEvidenceRequest.file = fs.createReadStream(createDisputeEvidenceRequest.file);
            localVarRequestOptions.formData = createDisputeEvidenceRequest;
        }
        else {
            localVarRequestOptions.body = models_1.ObjectSerializer.serialize(createDisputeEvidenceRequest, "CreateDisputeEvidenceRequest");
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "DisputeEvidence");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Upload dispute evidence for a `Dispute`.  There are four values available for `state` that details the status of the evidence upload:  * **PENDING**: The evidence file has not yet been submitted to the `Processor`. No user action is required. * **SUCCEEDED**: The evidence file has been successfully sent to the `Processor`. No further user action is required. * **CANCELED**: The evidence file upload was not completed due to user action. * **FAILED**: An issue occurred. User action is required. Any of the following issues could have occurred:     * There was an error in the system and the user should retry uploading their evidence file.     * There is an issue with the file and the user should retry uploading a different file.     * There is an issue and the user should contact Support.
     * @summary Create Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
     * @param createDisputeEvidenceRequest
     */
    async createDisputeEvidence(disputeId, createDisputeEvidenceRequest, options = { headers: {} }) {
        const responseObject = await this.createDisputeEvidenceHelper(disputeId, createDisputeEvidenceRequest, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return dataList;
        }
        return responseObject.body;
    }
    /**
     * Upload dispute evidence for a `Dispute`.  There are four values available for `state` that details the status of the evidence upload:  * **PENDING**: The evidence file has not yet been submitted to the `Processor`. No user action is required. * **SUCCEEDED**: The evidence file has been successfully sent to the `Processor`. No further user action is required. * **CANCELED**: The evidence file upload was not completed due to user action. * **FAILED**: An issue occurred. User action is required. Any of the following issues could have occurred:     * There was an error in the system and the user should retry uploading their evidence file.     * There is an issue with the file and the user should retry uploading a different file.     * There is an issue and the user should contact Support.
     * @summary Create Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
     * @param createDisputeEvidenceRequest
     */
    async createDisputeEvidenceHttp(disputeId, createDisputeEvidenceRequest, options = { headers: {} }) {
        const responseObject = await this.createDisputeEvidenceHelper(disputeId, createDisputeEvidenceRequest, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return Promise.resolve({ response: responseObject.response, body: dataList });
        }
        return responseObject;
    }
    /**
     * Helper function.
     * Retrieve the details of a previously created `Dispute`.
     * @summary Get Dispute
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch.
     */
    async getHelper(disputeId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/disputes/{dispute_id}'
            .replace('{' + 'dispute_id' + '}', encodeURIComponent(String(disputeId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'disputeId' is not null or undefined
        if (disputeId === null || disputeId === undefined) {
            throw new Error('Required parameter disputeId was null or undefined when calling getDispute.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "Dispute");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the details of a previously created `Dispute`.
     * @summary Get Dispute
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch.
     */
    async get(disputeId, options = { headers: {} }) {
        const responseObject = await this.getHelper(disputeId, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return dataList;
        }
        return responseObject.body;
    }
    /**
     * Retrieve the details of a previously created `Dispute`.
     * @summary Get Dispute
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch.
     */
    async getHttp(disputeId, options = { headers: {} }) {
        const responseObject = await this.getHelper(disputeId, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return Promise.resolve({ response: responseObject.response, body: dataList });
        }
        return responseObject;
    }
    /**
     * Helper function.
     * Fetch evidence uploaded for a `Dispute`.   If you don\'t have the Finix Dashboard available, you can fetch the evidence to review the `status` of the upload to confirm the evidence got sent to the processor.
     * @summary Fetch Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch evidence for.
     * @param evidenceId ID of &#x60;evidence&#x60; to fetch.
     */
    async getDisputeEvidenceHelper(disputeId, evidenceId, options = { headers: {} }) {
        const localVarPath = this.basePath + '/disputes/{dispute_id}/evidence/{evidence_id}'
            .replace('{' + 'dispute_id' + '}', encodeURIComponent(String(disputeId)))
            .replace('{' + 'evidence_id' + '}', encodeURIComponent(String(evidenceId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'disputeId' is not null or undefined
        if (disputeId === null || disputeId === undefined) {
            throw new Error('Required parameter disputeId was null or undefined when calling getDisputeEvidence.');
        }
        // verify required parameter 'evidenceId' is not null or undefined
        if (evidenceId === null || evidenceId === undefined) {
            throw new Error('Required parameter evidenceId was null or undefined when calling getDisputeEvidence.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "DisputeEvidence");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Fetch evidence uploaded for a `Dispute`.   If you don\'t have the Finix Dashboard available, you can fetch the evidence to review the `status` of the upload to confirm the evidence got sent to the processor.
     * @summary Fetch Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch evidence for.
     * @param evidenceId ID of &#x60;evidence&#x60; to fetch.
     */
    async getDisputeEvidence(disputeId, evidenceId, options = { headers: {} }) {
        const responseObject = await this.getDisputeEvidenceHelper(disputeId, evidenceId, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return dataList;
        }
        return responseObject.body;
    }
    /**
     * Fetch evidence uploaded for a `Dispute`.   If you don\'t have the Finix Dashboard available, you can fetch the evidence to review the `status` of the upload to confirm the evidence got sent to the processor.
     * @summary Fetch Dispute Evidence
     * @param disputeId ID of &#x60;Dispute&#x60; to fetch evidence for.
     * @param evidenceId ID of &#x60;evidence&#x60; to fetch.
     */
    async getDisputeEvidenceHttp(disputeId, evidenceId, options = { headers: {} }) {
        const responseObject = await this.getDisputeEvidenceHelper(disputeId, evidenceId, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return Promise.resolve({ response: responseObject.response, body: dataList });
        }
        return responseObject;
    }
    /**
     * Helper function.
     * Retrieve a list of dispute evidence for a `Dispute`.
     * @summary List Dispute Evidence

    * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
    *
    */
    async listDisputeEvidenceByDisputeIdHelper(disputeId, listDisputeEvidenceQueryParams, options = { headers: {} }) {
        const localVarPath = this.basePath + '/disputes/{dispute_id}/evidence'
            .replace('{' + 'dispute_id' + '}', encodeURIComponent(String(disputeId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'disputeId' is not null or undefined
        if (disputeId === null || disputeId === undefined) {
            throw new Error('Required parameter disputeId was null or undefined when calling listDisputeEvidence.');
        }
        if (listDisputeEvidenceQueryParams != undefined) {
            if (listDisputeEvidenceQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(listDisputeEvidenceQueryParams.limit, "number");
            }
            if (listDisputeEvidenceQueryParams.afterCursor !== undefined) {
                localVarQueryParameters['after_cursor'] = models_1.ObjectSerializer.serialize(listDisputeEvidenceQueryParams.afterCursor, "string");
            }
            if (listDisputeEvidenceQueryParams.beforeCursor !== undefined) {
                localVarQueryParameters['before_cursor'] = models_1.ObjectSerializer.serialize(listDisputeEvidenceQueryParams.beforeCursor, "string");
            }
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "DisputeEvidenceList");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a list of dispute evidence for a `Dispute`.
     * @summary List Dispute Evidence

    * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
    *
    */
    async listDisputeEvidenceByDisputeId(disputeId, listDisputeEvidenceQueryParams, options = { headers: {} }) {
        const responseObject = await this.listDisputeEvidenceByDisputeIdHelper(disputeId, listDisputeEvidenceQueryParams, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return dataList;
        }
        return responseObject.body;
    }
    /**
     * Retrieve a list of dispute evidence for a `Dispute`.
     * @summary List Dispute Evidence

    * @param disputeId ID of &#x60;Dispute&#x60; to mange evidence for.
    *
    */
    async listDisputeEvidenceByDisputeIdHttp(disputeId, listDisputeEvidenceQueryParams, options = { headers: {} }) {
        const responseObject = await this.listDisputeEvidenceByDisputeIdHelper(disputeId, listDisputeEvidenceQueryParams, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return Promise.resolve({ response: responseObject.response, body: dataList });
        }
        return responseObject;
    }
    /**
     * Helper function.
     * Retrieve a list of `Disputes`.
     * @summary List Disputes

    */
    async listHelper(listDisputesQueryParams, options = { headers: {} }) {
        const localVarPath = this.basePath + '/disputes';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        if (listDisputesQueryParams != undefined) {
            if (listDisputesQueryParams.sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(listDisputesQueryParams.sort, "string");
            }
            if (listDisputesQueryParams.offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(listDisputesQueryParams.offset, "number");
            }
            if (listDisputesQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(listDisputesQueryParams.limit, "number");
            }
            if (listDisputesQueryParams.createdAtGte !== undefined) {
                localVarQueryParameters['created_at.gte'] = models_1.ObjectSerializer.serialize(listDisputesQueryParams.createdAtGte, "string");
            }
            if (listDisputesQueryParams.createdAtLte !== undefined) {
                localVarQueryParameters['created_at.lte'] = models_1.ObjectSerializer.serialize(listDisputesQueryParams.createdAtLte, "string");
            }
            if (listDisputesQueryParams.updatedAtGte !== undefined) {
                localVarQueryParameters['updated_at.gte'] = models_1.ObjectSerializer.serialize(listDisputesQueryParams.updatedAtGte, "string");
            }
            if (listDisputesQueryParams.updatedAtLte !== undefined) {
                localVarQueryParameters['updated_at.lte'] = models_1.ObjectSerializer.serialize(listDisputesQueryParams.updatedAtLte, "string");
            }
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "DisputesList");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve a list of `Disputes`.
     * @summary List Disputes

    */
    async list(listDisputesQueryParams, options = { headers: {} }) {
        const responseObject = await this.listHelper(listDisputesQueryParams, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return dataList;
        }
        return responseObject.body;
    }
    /**
     * Retrieve a list of `Disputes`.
     * @summary List Disputes

    */
    async listHttp(listDisputesQueryParams, options = { headers: {} }) {
        const responseObject = await this.listHelper(listDisputesQueryParams, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return Promise.resolve({ response: responseObject.response, body: dataList });
        }
        return responseObject;
    }
    /**
     * Helper function.
     * List the adjustment `Transfers` for a `Dispute`. Depending on the stage of the `Dispute`, different adjustment `Transfer` subtypes can be applied.  There are four available subtypes for adjustment `Transfers` in `Disputes`: <ul><li><strong>PLATFORM\\_CREDIT</strong><li><strong>MERCHANT\\_DEBIT</strong><li><strong>MERCHANT\\_CREDIT</strong><li><strong>PLATFORM\\_DEBIT</strong></ul>
     * @summary Fetch Dispute Adjustment Transfers

    * @param disputeId ID of the &#x60;Dispute&#x60; resource.
    *
    */
    async listDisputesAdjustmentsHelper(disputeId, listDisputesAdjustmentsQueryParams, options = { headers: {} }) {
        const localVarPath = this.basePath + '/disputes/{dispute_id}/adjustment_transfers'
            .replace('{' + 'dispute_id' + '}', encodeURIComponent(String(disputeId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'disputeId' is not null or undefined
        if (disputeId === null || disputeId === undefined) {
            throw new Error('Required parameter disputeId was null or undefined when calling listDisputesAdjustments.');
        }
        if (listDisputesAdjustmentsQueryParams != undefined) {
            if (listDisputesAdjustmentsQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(listDisputesAdjustmentsQueryParams.limit, "number");
            }
            if (listDisputesAdjustmentsQueryParams.offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(listDisputesAdjustmentsQueryParams.offset, "number");
            }
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "AdjustmentTransfersList");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * List the adjustment `Transfers` for a `Dispute`. Depending on the stage of the `Dispute`, different adjustment `Transfer` subtypes can be applied.  There are four available subtypes for adjustment `Transfers` in `Disputes`: <ul><li><strong>PLATFORM\\_CREDIT</strong><li><strong>MERCHANT\\_DEBIT</strong><li><strong>MERCHANT\\_CREDIT</strong><li><strong>PLATFORM\\_DEBIT</strong></ul>
     * @summary Fetch Dispute Adjustment Transfers

    * @param disputeId ID of the &#x60;Dispute&#x60; resource.
    *
    */
    async listDisputesAdjustments(disputeId, listDisputesAdjustmentsQueryParams, options = { headers: {} }) {
        const responseObject = await this.listDisputesAdjustmentsHelper(disputeId, listDisputesAdjustmentsQueryParams, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return dataList;
        }
        return responseObject.body;
    }
    /**
     * List the adjustment `Transfers` for a `Dispute`. Depending on the stage of the `Dispute`, different adjustment `Transfer` subtypes can be applied.  There are four available subtypes for adjustment `Transfers` in `Disputes`: <ul><li><strong>PLATFORM\\_CREDIT</strong><li><strong>MERCHANT\\_DEBIT</strong><li><strong>MERCHANT\\_CREDIT</strong><li><strong>PLATFORM\\_DEBIT</strong></ul>
     * @summary Fetch Dispute Adjustment Transfers

    * @param disputeId ID of the &#x60;Dispute&#x60; resource.
    *
    */
    async listDisputesAdjustmentsHttp(disputeId, listDisputesAdjustmentsQueryParams, options = { headers: {} }) {
        const responseObject = await this.listDisputesAdjustmentsHelper(disputeId, listDisputesAdjustmentsQueryParams, options);
        if (responseObject.body.hasOwnProperty('embedded')) {
            let dataList = await this.embeddedHelper(responseObject);
            return Promise.resolve({ response: responseObject.response, body: dataList });
        }
        return responseObject;
    }
    async embeddedHelper(responseObject) {
        const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
        let dataList = responseObject.body.embedded[embeddedName];
        dataList.page = responseObject.body.page;
        dataList.links = responseObject.body.links;
        return dataList;
    }
}
exports.DisputesApi = DisputesApi;
