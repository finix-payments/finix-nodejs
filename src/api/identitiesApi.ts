/**
 * Finix API
 */


import localVarRequest from 'request';
import * as http from 'http';
// @ts-ignore: Some endpoints interact with files
import * as fs from 'fs';
/* tslint:disable:no-unused-locals */
// @ts-ignore: Some unused imports always provided
import { CreateAssociatedIdentityRequest } from '../model/createAssociatedIdentityRequest';
// @ts-ignore: Some unused imports always provided
import { CreateIdentityRequest } from '../model/createIdentityRequest';
// @ts-ignore: Some unused imports always provided
import { CreateVerificationRequest } from '../model/createVerificationRequest';
// @ts-ignore: Some unused imports always provided
import { Error401Unauthorized } from '../model/error401Unauthorized';
// @ts-ignore: Some unused imports always provided
import { Error403ForbiddenList } from '../model/error403ForbiddenList';
// @ts-ignore: Some unused imports always provided
import { Error404NotFoundList } from '../model/error404NotFoundList';
// @ts-ignore: Some unused imports always provided
import { Error406NotAcceptable } from '../model/error406NotAcceptable';
// @ts-ignore: Some unused imports always provided
import { ErrorGeneric } from '../model/errorGeneric';
// @ts-ignore: Some unused imports always provided
import { IdentitiesList } from '../model/identitiesList';
// @ts-ignore: Some unused imports always provided
import { Identity } from '../model/identity';
// @ts-ignore: Some unused imports always provided
import { UpdateIdentityRequest } from '../model/updateIdentityRequest';
// @ts-ignore: Some unused imports always provided
import { Verification } from '../model/verification';
import { ListIdentitiesQueryParams } from '../model/listIdentitiesQueryParams';
import { ListIdentityAssociatedIdentitiesQueryParams } from '../model/listIdentityAssociatedIdentitiesQueryParams';
import { ObjectSerializer, Authentication, VoidAuth, Interceptor, finixList } from '../model/models';
import { HttpBasicAuth } from '../model/models';

import { HttpError } from './apis';

let defaultBasePath = 'https://finix.sandbox-payments-api.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum IdentitiesApiApiKeys {
}

export class IdentitiesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'BasicAuth': new HttpBasicAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: IdentitiesApiApiKeys, value: string) {
        (this.authentications as any)[IdentitiesApiApiKeys[key]].apiKey = value;
    }

    set username(username: string) {
        this.authentications.BasicAuth.username = username;
    }

    set password(password: string) {
        this.authentications.BasicAuth.password = password;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Helper function. 
     * Create an associated `Identity` for [every owner with 25% or more ownership](/guides/onboarding/onboarding-with-api#step-3-add-associated-identities) over the merchant.
     * @summary Create an Associated Identity
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * @param createAssociatedIdentityRequest 
     */

    private async createAssociatedIdentityHelper(identityId: string, createAssociatedIdentityRequest?: CreateAssociatedIdentityRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Identity;  rawBody: any; }> {
        const localVarPath = this.basePath + '/identities/{identity_id}/associated_identities'
            .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'identityId' is not null or undefined
        if (identityId === null || identityId === undefined) {
            throw new Error('Required parameter identityId was null or undefined when calling createAssociatedIdentity.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        localVarHeaderParams['Content-Type'] = "application/hal+json";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (createAssociatedIdentityRequest && createAssociatedIdentityRequest.hasOwnProperty('file')){
        //if (createAssociatedIdentityRequest != undefined && createAssociatedIdentityRequest != null && createAssociatedIdentityRequest.hasOwnProperty('file')){
            localVarRequestOptions.formData = createAssociatedIdentityRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(createAssociatedIdentityRequest, "CreateAssociatedIdentityRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Identity;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "Identity");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Create an associated `Identity` for [every owner with 25% or more ownership](/guides/onboarding/onboarding-with-api#step-3-add-associated-identities) over the merchant.
     * @summary Create an Associated Identity
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * @param createAssociatedIdentityRequest 
     */
    public async createAssociatedIdentity(identityId: string, createAssociatedIdentityRequest?: CreateAssociatedIdentityRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Identity> {
        const responseObject = await this.createAssociatedIdentityHelper(identityId, createAssociatedIdentityRequest,  options);
        return responseObject.body;
    }

    /**
     * Create an associated `Identity` for [every owner with 25% or more ownership](/guides/onboarding/onboarding-with-api#step-3-add-associated-identities) over the merchant.
     * @summary Create an Associated Identity
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * @param createAssociatedIdentityRequest 
     */
    public async createAssociatedIdentityHttp(identityId: string, createAssociatedIdentityRequest?: CreateAssociatedIdentityRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Identity;  rawBody: any;}> {
        const responseObject = await this.createAssociatedIdentityHelper(identityId, createAssociatedIdentityRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Create an `Identity` for your seller or buyer.  All fields for a buyer\'s `Identity` are optional.   Providing `business_type` indicates that the `Identity` is being created for a Merchant.  Related Guides: [Getting Started](/guides/getting-started/), [Onboarding](/guides/onboarding/)
     * @summary Create an Identity
     * @param createIdentityRequest 
     */

    private async createHelper(createIdentityRequest?: CreateIdentityRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Identity;  rawBody: any; }> {
        const localVarPath = this.basePath + '/identities';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};


        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        localVarHeaderParams['Content-Type'] = "application/hal+json";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (createIdentityRequest && createIdentityRequest.hasOwnProperty('file')){
        //if (createIdentityRequest != undefined && createIdentityRequest != null && createIdentityRequest.hasOwnProperty('file')){
            localVarRequestOptions.formData = createIdentityRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(createIdentityRequest, "CreateIdentityRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Identity;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "Identity");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Create an `Identity` for your seller or buyer.  All fields for a buyer\'s `Identity` are optional.   Providing `business_type` indicates that the `Identity` is being created for a Merchant.  Related Guides: [Getting Started](/guides/getting-started/), [Onboarding](/guides/onboarding/)
     * @summary Create an Identity
     * @param createIdentityRequest 
     */
    public async create(createIdentityRequest?: CreateIdentityRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Identity> {
        const responseObject = await this.createHelper(createIdentityRequest,  options);
        return responseObject.body;
    }

    /**
     * Create an `Identity` for your seller or buyer.  All fields for a buyer\'s `Identity` are optional.   Providing `business_type` indicates that the `Identity` is being created for a Merchant.  Related Guides: [Getting Started](/guides/getting-started/), [Onboarding](/guides/onboarding/)
     * @summary Create an Identity
     * @param createIdentityRequest 
     */
    public async createHttp(createIdentityRequest?: CreateIdentityRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Identity;  rawBody: any;}> {
        const responseObject = await this.createHelper(createIdentityRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Verify an `Identity`.
     * @summary Verify an Identity
     * @param identityId ID of &#x60;Identity&#x60; to verify.
     * @param createVerificationRequest 
     */

    private async createIdentityVerificationHelper(identityId: string, createVerificationRequest?: CreateVerificationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Verification;  rawBody: any; }> {
        const localVarPath = this.basePath + '/identities/{identity_id}/verifications'
            .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'identityId' is not null or undefined
        if (identityId === null || identityId === undefined) {
            throw new Error('Required parameter identityId was null or undefined when calling createIdentityVerification.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        localVarHeaderParams['Content-Type'] = "application/hal+json";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (createVerificationRequest && createVerificationRequest.hasOwnProperty('file')){
        //if (createVerificationRequest != undefined && createVerificationRequest != null && createVerificationRequest.hasOwnProperty('file')){
            localVarRequestOptions.formData = createVerificationRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(createVerificationRequest, "CreateVerificationRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Verification;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "Verification");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Verify an `Identity`.
     * @summary Verify an Identity
     * @param identityId ID of &#x60;Identity&#x60; to verify.
     * @param createVerificationRequest 
     */
    public async createIdentityVerification(identityId: string, createVerificationRequest?: CreateVerificationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Verification> {
        const responseObject = await this.createIdentityVerificationHelper(identityId, createVerificationRequest,  options);
        return responseObject.body;
    }

    /**
     * Verify an `Identity`.
     * @summary Verify an Identity
     * @param identityId ID of &#x60;Identity&#x60; to verify.
     * @param createVerificationRequest 
     */
    public async createIdentityVerificationHttp(identityId: string, createVerificationRequest?: CreateVerificationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Verification;  rawBody: any;}> {
        const responseObject = await this.createIdentityVerificationHelper(identityId, createVerificationRequest,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Retrieve the details of a previously created `Identity`.
     * @summary Fetch an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     */

    private async getHelper(identityId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Identity;  rawBody: any; }> {
        const localVarPath = this.basePath + '/identities/{identity_id}'
            .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'identityId' is not null or undefined
        if (identityId === null || identityId === undefined) {
            throw new Error('Required parameter identityId was null or undefined when calling getIdentity.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Identity;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "Identity");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve the details of a previously created `Identity`.
     * @summary Fetch an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     */
    public async get(identityId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Identity> {
        const responseObject = await this.getHelper(identityId,  options);
        return responseObject.body;
    }

    /**
     * Retrieve the details of a previously created `Identity`.
     * @summary Fetch an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     */
    public async getHttp(identityId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Identity;  rawBody: any;}> {
        const responseObject = await this.getHelper(identityId,  options);
        return responseObject;
    }
    /**
     * Helper function. 
     * Retrieves a list of `Identities`.
     * @summary List Identities

    */
    private async listHelper (listIdentitiesQueryParams?:ListIdentitiesQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IdentitiesList;  rawBody: any; }> {
        const localVarPath = this.basePath + '/identities';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (listIdentitiesQueryParams != undefined){ 
            if (listIdentitiesQueryParams.sort !== undefined) {
                localVarQueryParameters['sort'] = ObjectSerializer.serialize(listIdentitiesQueryParams.sort, "string");
            }
            if (listIdentitiesQueryParams.afterCursor !== undefined) {
                localVarQueryParameters['after_cursor'] = ObjectSerializer.serialize(listIdentitiesQueryParams.afterCursor, "string");
            }
            if (listIdentitiesQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = ObjectSerializer.serialize(listIdentitiesQueryParams.limit, "number");
            }
            if (listIdentitiesQueryParams.id !== undefined) {
                localVarQueryParameters['id'] = ObjectSerializer.serialize(listIdentitiesQueryParams.id, "string");
            }
            if (listIdentitiesQueryParams.createdAtGte !== undefined) {
                localVarQueryParameters['created_at.gte'] = ObjectSerializer.serialize(listIdentitiesQueryParams.createdAtGte, "string");
            }
            if (listIdentitiesQueryParams.createdAtLte !== undefined) {
                localVarQueryParameters['created_at.lte'] = ObjectSerializer.serialize(listIdentitiesQueryParams.createdAtLte, "string");
            }
            if (listIdentitiesQueryParams.defaultStatementDescriptor !== undefined) {
                localVarQueryParameters['default_statement_descriptor'] = ObjectSerializer.serialize(listIdentitiesQueryParams.defaultStatementDescriptor, "string");
            }
            if (listIdentitiesQueryParams.businessName !== undefined) {
                localVarQueryParameters['business_name'] = ObjectSerializer.serialize(listIdentitiesQueryParams.businessName, "string");
            }
            if (listIdentitiesQueryParams.businessType !== undefined) {
                localVarQueryParameters['business_type'] = ObjectSerializer.serialize(listIdentitiesQueryParams.businessType, "string");
            }
            if (listIdentitiesQueryParams.email !== undefined) {
                localVarQueryParameters['email'] = ObjectSerializer.serialize(listIdentitiesQueryParams.email, "string");
            }
            if (listIdentitiesQueryParams.firstName !== undefined) {
                localVarQueryParameters['first_name'] = ObjectSerializer.serialize(listIdentitiesQueryParams.firstName, "string");
            }
            if (listIdentitiesQueryParams.lastName !== undefined) {
                localVarQueryParameters['last_name'] = ObjectSerializer.serialize(listIdentitiesQueryParams.lastName, "string");
            }
            if (listIdentitiesQueryParams.title !== undefined) {
                localVarQueryParameters['title'] = ObjectSerializer.serialize(listIdentitiesQueryParams.title, "string");
            }
            if (listIdentitiesQueryParams.beforeCursor !== undefined) {
                localVarQueryParameters['before_cursor'] = ObjectSerializer.serialize(listIdentitiesQueryParams.beforeCursor, "string");
            }

        }
        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IdentitiesList;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "IdentitiesList");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieves a list of `Identities`.
     * @summary List Identities
     */
    public async list (listIdentitiesQueryParams?:ListIdentitiesQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<finixList<any>> {
        const responseObject = await this.listHelper(listIdentitiesQueryParams, options);
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.list(queryParam);
        }
        let dataList = new finixList<any>(nextFetch, !reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        return dataList;
    }

    /**
     * Retrieves a list of `Identities`.
     * @summary List Identities
     */
    public async listHttp (listIdentitiesQueryParams?:ListIdentitiesQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, body: finixList<any>, rawBody: any}> {
        const responseObject = await this.listHelper(listIdentitiesQueryParams, options);
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.list(queryParam);
        }
        let dataList = new finixList<any>(nextFetch, reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        //dataList.hasMore = !reachedEnd;
        return Promise.resolve({response: responseObject.response, body: dataList, rawBody: responseObject.rawBody});
    }
    /**
     * Helper function. 
     * Retrieve a list of `Associated Identities` for an `Identity`.
     * @summary List Associated Identities

    * @param identityId ID of &#x60;Identity&#x60; to associate object with.
    * 
    */
    private async listAssociatedIdentitiesHelper (identityId: string, listIdentityAssociatedIdentitiesQueryParams?:ListIdentityAssociatedIdentitiesQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IdentitiesList;  rawBody: any; }> {
        const localVarPath = this.basePath + '/identities/{identity_id}/associated_identities'
            .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'identityId' is not null or undefined
        if (identityId === null || identityId === undefined) {
            throw new Error('Required parameter identityId was null or undefined when calling listIdentityAssociatedIdentities.');
        }
        if (listIdentityAssociatedIdentitiesQueryParams != undefined){ 
            if (listIdentityAssociatedIdentitiesQueryParams.limit !== undefined) {
                localVarQueryParameters['limit'] = ObjectSerializer.serialize(listIdentityAssociatedIdentitiesQueryParams.limit, "number");
            }
            if (listIdentityAssociatedIdentitiesQueryParams.afterCursor !== undefined) {
                localVarQueryParameters['after_cursor'] = ObjectSerializer.serialize(listIdentityAssociatedIdentitiesQueryParams.afterCursor, "string");
            }
            if (listIdentityAssociatedIdentitiesQueryParams.beforeCursor !== undefined) {
                localVarQueryParameters['before_cursor'] = ObjectSerializer.serialize(listIdentityAssociatedIdentitiesQueryParams.beforeCursor, "string");
            }

        }
        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IdentitiesList;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "IdentitiesList");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Retrieve a list of `Associated Identities` for an `Identity`.
     * @summary List Associated Identities
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     *  
     */
    public async listAssociatedIdentities (identityId: string, listIdentityAssociatedIdentitiesQueryParams?:ListIdentityAssociatedIdentitiesQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<finixList<any>> {
        const responseObject = await this.listAssociatedIdentitiesHelper(identityId, listIdentityAssociatedIdentitiesQueryParams, options);
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.listAssociatedIdentities(identityId, queryParam);
        }
        let dataList = new finixList<any>(nextFetch, !reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        return dataList;
    }

    /**
     * Retrieve a list of `Associated Identities` for an `Identity`.
     * @summary List Associated Identities
     * @param identityId ID of &#x60;Identity&#x60; to associate object with.
     * 
     */
    public async listAssociatedIdentitiesHttp (identityId: string, listIdentityAssociatedIdentitiesQueryParams?:ListIdentityAssociatedIdentitiesQueryParams, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, body: finixList<any>, rawBody: any}> {
        const responseObject = await this.listAssociatedIdentitiesHelper(identityId, listIdentityAssociatedIdentitiesQueryParams, options);
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.listAssociatedIdentities(identityId, queryParam);
        }
        let dataList = new finixList<any>(nextFetch, reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        //dataList.hasMore = !reachedEnd;
        return Promise.resolve({response: responseObject.response, body: dataList, rawBody: responseObject.rawBody});
    }
    /**
     * Helper function. 
     * Update an existing `Identity`.  If you are updating the `Identity` of a `Merchant` that’s already been onboarded, you need to [verify the merchant again](/api/tag/Merchants/#tag/Merchants/operation/createMerchantVerification).
     * @summary Update an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     * @param updateIdentityRequest 
     */

    private async updateHelper(identityId: string, updateIdentityRequest?: UpdateIdentityRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Identity;  rawBody: any; }> {
        const localVarPath = this.basePath + '/identities/{identity_id}'
            .replace('{' + 'identity_id' + '}', encodeURIComponent(String(identityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/hal+json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'identityId' is not null or undefined
        if (identityId === null || identityId === undefined) {
            throw new Error('Required parameter identityId was null or undefined when calling updateIdentity.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "2022-02-01";
        localVarHeaderParams['Content-Type'] = "application/hal+json";
        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (updateIdentityRequest && updateIdentityRequest.hasOwnProperty('file')){
        //if (updateIdentityRequest != undefined && updateIdentityRequest != null && updateIdentityRequest.hasOwnProperty('file')){
            localVarRequestOptions.formData = updateIdentityRequest;
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize(updateIdentityRequest, "UpdateIdentityRequest");   
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Identity;  rawBody: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            const rawBody: string = body;
                            body = ObjectSerializer.deserialize(body, "Identity");
                            resolve({ response: response, body: body, rawBody: rawBody });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * Update an existing `Identity`.  If you are updating the `Identity` of a `Merchant` that’s already been onboarded, you need to [verify the merchant again](/api/tag/Merchants/#tag/Merchants/operation/createMerchantVerification).
     * @summary Update an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     * @param updateIdentityRequest 
     */
    public async update(identityId: string, updateIdentityRequest?: UpdateIdentityRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<Identity> {
        const responseObject = await this.updateHelper(identityId, updateIdentityRequest,  options);
        return responseObject.body;
    }

    /**
     * Update an existing `Identity`.  If you are updating the `Identity` of a `Merchant` that’s already been onboarded, you need to [verify the merchant again](/api/tag/Merchants/#tag/Merchants/operation/createMerchantVerification).
     * @summary Update an Identity
     * @param identityId ID of the &#x60;Identity&#x60; to fetch.
     * @param updateIdentityRequest 
     */
    public async updateHttp(identityId: string, updateIdentityRequest?: UpdateIdentityRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: Identity;  rawBody: any;}> {
        const responseObject = await this.updateHelper(identityId, updateIdentityRequest,  options);
        return responseObject;
    }


    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */ 
    // @ts-ignore: Not all endpoints have list views
    private embeddedHelper(responseObject: any, dataList: finixList<any>){
        if(responseObject.body.embedded == null || responseObject.body.embedded == undefined){
            dataList.page = responseObject.body.page;
            dataList.links = responseObject.body.links;
            return dataList;
        }
        const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
        let tempList = <finixList<any>> responseObject.body.embedded[embeddedName];
        tempList.forEach((item: any) => {dataList.add(item)});
        dataList.page = responseObject.body.page;
        dataList.links = responseObject.body.links;
        return dataList;
    }

    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    // @ts-ignore: Not all endpoints have list views
    private getOffsetQueryParam(responseObject: any, queryParam: any){
        queryParam.offset = responseObject.body.page.offset + responseObject.body.page.limit;
        var endReached: Boolean = false;
        if (responseObject.body.page.offset + responseObject.body.page.limit > responseObject.body.page.count){
            endReached = true;
        }
        return [queryParam, endReached];
    }

    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    // @ts-ignore: Not all endpoints have list views
    private getCursorQueryParam(responseObject: any, queryParam: any){
        queryParam.afterCursor = responseObject.body.page.nextCursor;
        var endReached: Boolean = false;
        if (responseObject.body.page.nextCursor == undefined){
            endReached = true;
        }
        return [queryParam, endReached];
    }
}   
