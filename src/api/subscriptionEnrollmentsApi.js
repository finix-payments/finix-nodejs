"use strict";
/**
 * Finix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-01
 * Contact: support@finixpayments.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionEnrollmentsApi = exports.SubscriptionEnrollmentsApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const models_2 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://finix.sandbox-payments-api.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var SubscriptionEnrollmentsApiApiKeys;
(function (SubscriptionEnrollmentsApiApiKeys) {
})(SubscriptionEnrollmentsApiApiKeys = exports.SubscriptionEnrollmentsApiApiKeys || (exports.SubscriptionEnrollmentsApiApiKeys = {}));
class SubscriptionEnrollmentsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'BasicAuth': new models_2.HttpBasicAuth(),
        };
        this.interceptors = [];
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SubscriptionEnrollmentsApiApiKeys[key]].apiKey = value;
    }
    set username(username) {
        this.authentications.BasicAuth.username = username;
    }
    set password(password) {
        this.authentications.BasicAuth.password = password;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Helper function.
     * Create a `subscription_enrollment`.  A `subscription_enrollment` details which `Merchant` gets charged, to what schedule, and when the subscription will start. The `subscription_enrollment` must be associated with a `Subscription Schedule`.
     * @summary Create a Subscription Enrollment
     * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
     * @param createSubscriptionEnrollmentRequest
     */
    createHelper(subscriptionScheduleId, createSubscriptionEnrollmentRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_schedules/{subscription_schedule_id}/subscription_enrollments'
                .replace('{' + 'subscription_schedule_id' + '}', encodeURIComponent(String(subscriptionScheduleId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'subscriptionScheduleId' is not null or undefined
            if (subscriptionScheduleId === null || subscriptionScheduleId === undefined) {
                throw new Error('Required parameter subscriptionScheduleId was null or undefined when calling createSubscriptionEnrollments.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (createSubscriptionEnrollmentRequest != undefined && createSubscriptionEnrollmentRequest != null && createSubscriptionEnrollmentRequest.hasOwnProperty('file')) {
                localVarRequestOptions.formData = createSubscriptionEnrollmentRequest;
            }
            else {
                localVarRequestOptions.body = models_1.ObjectSerializer.serialize(createSubscriptionEnrollmentRequest, "CreateSubscriptionEnrollmentRequest");
            }
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "SubscriptionEnrollment");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Create a `subscription_enrollment`.  A `subscription_enrollment` details which `Merchant` gets charged, to what schedule, and when the subscription will start. The `subscription_enrollment` must be associated with a `Subscription Schedule`.
     * @summary Create a Subscription Enrollment
     * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
     * @param createSubscriptionEnrollmentRequest
     */
    create(subscriptionScheduleId, createSubscriptionEnrollmentRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createHelper(subscriptionScheduleId, createSubscriptionEnrollmentRequest, options);
            return responseObject.body;
        });
    }
    /**
     * Create a `subscription_enrollment`.  A `subscription_enrollment` details which `Merchant` gets charged, to what schedule, and when the subscription will start. The `subscription_enrollment` must be associated with a `Subscription Schedule`.
     * @summary Create a Subscription Enrollment
     * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
     * @param createSubscriptionEnrollmentRequest
     */
    createHttp(subscriptionScheduleId, createSubscriptionEnrollmentRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.createHelper(subscriptionScheduleId, createSubscriptionEnrollmentRequest, options);
            return responseObject;
        });
    }
    /**
     * Helper function.
     * Remove a `subscription_enrollment`.
     * @summary Delete a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     */
    removeHelper(subscriptionEnrollmentId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_enrollments/{subscription_enrollment_id}'
                .replace('{' + 'subscription_enrollment_id' + '}', encodeURIComponent(String(subscriptionEnrollmentId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'subscriptionEnrollmentId' is not null or undefined
            if (subscriptionEnrollmentId === null || subscriptionEnrollmentId === undefined) {
                throw new Error('Required parameter subscriptionEnrollmentId was null or undefined when calling deleteSubscriptionEnrollment.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Remove a `subscription_enrollment`.
     * @summary Delete a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     */
    remove(subscriptionEnrollmentId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.removeHelper(subscriptionEnrollmentId, options);
            return responseObject.body;
        });
    }
    /**
     * Remove a `subscription_enrollment`.
     * @summary Delete a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     */
    removeHttp(subscriptionEnrollmentId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.removeHelper(subscriptionEnrollmentId, options);
            return responseObject;
        });
    }
    /**
     * Helper function.
     * Retrieve the details of a `subscription_enrollment`.
     * @summary Get a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param merchant Filter by the objects &#x60;merchant&#x60; ID.
     */
    getHelper(subscriptionEnrollmentId, merchant, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_enrollments/{subscription_enrollment_id}'
                .replace('{' + 'subscription_enrollment_id' + '}', encodeURIComponent(String(subscriptionEnrollmentId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'subscriptionEnrollmentId' is not null or undefined
            if (subscriptionEnrollmentId === null || subscriptionEnrollmentId === undefined) {
                throw new Error('Required parameter subscriptionEnrollmentId was null or undefined when calling getSubscriptionEnrollment.');
            }
            if (merchant !== undefined) {
                localVarQueryParameters['merchant'] = models_1.ObjectSerializer.serialize(merchant, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "SubscriptionEnrollment");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Retrieve the details of a `subscription_enrollment`.
     * @summary Get a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param merchant Filter by the objects &#x60;merchant&#x60; ID.
     */
    get(subscriptionEnrollmentId, merchant, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.getHelper(subscriptionEnrollmentId, merchant, options);
            return responseObject.body;
        });
    }
    /**
     * Retrieve the details of a `subscription_enrollment`.
     * @summary Get a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param merchant Filter by the objects &#x60;merchant&#x60; ID.
     */
    getHttp(subscriptionEnrollmentId, merchant, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.getHelper(subscriptionEnrollmentId, merchant, options);
            return responseObject;
        });
    }
    /**
     * Helper function.
     * Retrieve a list of `Subscription Enrollments`.
     * @summary List Subscription Enrollments

    */
    listHelper(listSubscriptionEnrollmentsQueryParams, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_enrollments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (listSubscriptionEnrollmentsQueryParams != undefined) {
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "SubscriptionEnrollmentList");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Retrieve a list of `Subscription Enrollments`.
     * @summary List Subscription Enrollments

    */
    list(listSubscriptionEnrollmentsQueryParams, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listHelper(listSubscriptionEnrollmentsQueryParams, options);
            let dataList = yield this.embeddedHelper(responseObject);
            return dataList;
        });
    }
    /**
     * Retrieve a list of `Subscription Enrollments`.
     * @summary List Subscription Enrollments

    */
    listHttp(listSubscriptionEnrollmentsQueryParams, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listHelper(listSubscriptionEnrollmentsQueryParams, options);
            let dataList = yield this.embeddedHelper(responseObject);
            return Promise.resolve({ response: responseObject.response, body: dataList });
        });
    }
    /**
     * Helper function.
     * Retrieve a list of `Subscription Enrollments` for a specific `subscription_schedule`.
     * @summary List Subscription Enrollments on a Schedule

    * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
    *
    */
    listBySubscriptionScheduleIdHelper(subscriptionScheduleId, listSubscriptionEnrollmentsInScheduleQueryParams, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_schedules/{subscription_schedule_id}/subscription_enrollments'
                .replace('{' + 'subscription_schedule_id' + '}', encodeURIComponent(String(subscriptionScheduleId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'subscriptionScheduleId' is not null or undefined
            if (subscriptionScheduleId === null || subscriptionScheduleId === undefined) {
                throw new Error('Required parameter subscriptionScheduleId was null or undefined when calling listSubscriptionEnrollmentsInSchedule.');
            }
            if (listSubscriptionEnrollmentsInScheduleQueryParams != undefined) {
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "SubscriptionEnrollmentList");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Retrieve a list of `Subscription Enrollments` for a specific `subscription_schedule`.
     * @summary List Subscription Enrollments on a Schedule

    * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
    *
    */
    listBySubscriptionScheduleId(subscriptionScheduleId, listSubscriptionEnrollmentsInScheduleQueryParams, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listBySubscriptionScheduleIdHelper(subscriptionScheduleId, listSubscriptionEnrollmentsInScheduleQueryParams, options);
            let dataList = yield this.embeddedHelper(responseObject);
            return dataList;
        });
    }
    /**
     * Retrieve a list of `Subscription Enrollments` for a specific `subscription_schedule`.
     * @summary List Subscription Enrollments on a Schedule

    * @param subscriptionScheduleId The ID of the &#x60;subscription_schedule&#x60;.
    *
    */
    listBySubscriptionScheduleIdHttp(subscriptionScheduleId, listSubscriptionEnrollmentsInScheduleQueryParams, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.listBySubscriptionScheduleIdHelper(subscriptionScheduleId, listSubscriptionEnrollmentsInScheduleQueryParams, options);
            let dataList = yield this.embeddedHelper(responseObject);
            return Promise.resolve({ response: responseObject.response, body: dataList });
        });
    }
    /**
     * Helper function.
     * Update the details of a `subscription_enrollment`.
     * @summary Update a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param updateSubscriptionEnrollmentRequest
     */
    updateHelper(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/subscription/subscription_enrollments/{subscription_enrollment_id}'
                .replace('{' + 'subscription_enrollment_id' + '}', encodeURIComponent(String(subscriptionEnrollmentId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/hal+json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'subscriptionEnrollmentId' is not null or undefined
            if (subscriptionEnrollmentId === null || subscriptionEnrollmentId === undefined) {
                throw new Error('Required parameter subscriptionEnrollmentId was null or undefined when calling updateSubscriptionEnrollment.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            localVarHeaderParams['Finix-Version'] = "2022-02-01";
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            if (updateSubscriptionEnrollmentRequest != undefined && updateSubscriptionEnrollmentRequest != null && updateSubscriptionEnrollmentRequest.hasOwnProperty('file')) {
                localVarRequestOptions.formData = updateSubscriptionEnrollmentRequest;
            }
            else {
                localVarRequestOptions.body = models_1.ObjectSerializer.serialize(updateSubscriptionEnrollmentRequest, "UpdateSubscriptionEnrollmentRequest");
            }
            let authenticationPromise = Promise.resolve();
            if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.BasicAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "SubscriptionEnrollment");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Update the details of a `subscription_enrollment`.
     * @summary Update a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param updateSubscriptionEnrollmentRequest
     */
    update(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.updateHelper(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest, options);
            return responseObject.body;
        });
    }
    /**
     * Update the details of a `subscription_enrollment`.
     * @summary Update a Subscription Enrollment
     * @param subscriptionEnrollmentId The ID of the &#x60;subscription_enrollment&#x60;.
     * @param updateSubscriptionEnrollmentRequest
     */
    updateHttp(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const responseObject = yield this.updateHelper(subscriptionEnrollmentId, updateSubscriptionEnrollmentRequest, options);
            return responseObject;
        });
    }
    embeddedHelper(responseObject) {
        return __awaiter(this, void 0, void 0, function* () {
            if (responseObject.embedded == null || responseObject.embedded == undefined) {
                const dataList = new models_1.SuperSet();
                dataList.page = responseObject.body.page;
                dataList.links = responseObject.body.links;
                return dataList;
            }
            const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
            let tempList = responseObject.body.embedded[embeddedName];
            const dataList = new models_1.SuperSet();
            tempList.forEach(item => { dataList.add(item); });
            dataList.page = responseObject.body.page;
            dataList.links = responseObject.body.links;
            return dataList;
        });
    }
}
exports.SubscriptionEnrollmentsApi = SubscriptionEnrollmentsApi;
