{{>licenseInfo}}

import localVarRequest from 'request';
import * as http from 'http';
import * as fs from 'fs';
/* tslint:disable:no-unused-locals */
{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}
{{#operations}}
{{#operation}}
{{#vendorExtensions.x-group-parameters}}
import { {{#lambda.titlecase}}{{nickname}}QueryParams{{/lambda.titlecase}} } from '../model/{{nickname}}QueryParams';
{{/vendorExtensions.x-group-parameters}}
{{/operation}}
{{/operations}}
import { ObjectSerializer, Authentication, VoidAuth, Interceptor, finixList } from '../model/models';
{{#hasAuthMethods}}
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';
{{/hasAuthMethods}}

import { HttpError, RequestFile } from './apis';

let defaultBasePath = '{{{basePath}}}';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
export enum {{classname}}ApiKeys {
{{#authMethods}}
{{#isApiKey}}
    {{name}},
{{/isApiKey}}
{{/authMethods}}
}

export class {{classname}} {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasicBasic}}
        '{{name}}': new HttpBasicAuth(),
{{/isBasicBasic}}
{{#isBasicBearer}}
        '{{name}}': new HttpBearerAuth(),
{{/isBasicBearer}}
{{#isApiKey}}
        '{{name}}': new ApiKeyAuth({{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{#isKeyInQuery}}'query'{{/isKeyInQuery}}{{#isKeyInCookie}}'cookie'{{/isKeyInCookie}}, '{{keyParamName}}'),
{{/isApiKey}}
{{#isOAuth}}
        '{{name}}': new OAuth(),
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
{{#authMethods}}
{{#isBasicBasic}}
    constructor(username: string, password: string, basePath?: string);
{{/isBasicBasic}}
{{/authMethods}}
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
{{#authMethods}}
{{#isBasicBasic}}
            this.username = basePathOrUsername;
            this.password = password
{{/isBasicBasic}}
{{/authMethods}}
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: {{classname}}ApiKeys, value: string) {
        (this.authentications as any)[{{classname}}ApiKeys[key]].apiKey = value;
    }
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasicBasic}}

    set username(username: string) {
        this.authentications.{{name}}.username = username;
    }

    set password(password: string) {
        this.authentications.{{name}}.password = password;
    }
{{/isBasicBasic}}
{{#isBasicBearer}}

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.{{name}}.accessToken = accessToken;
    }
{{/isBasicBearer}}
{{#isOAuth}}

    set accessToken(token: string) {
        this.authentications.{{name}}.accessToken = token;
    }
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

{{#operation}}
    /**
     * Helper function. 
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{^vendorExtensions.x-group-parameters}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    {{/vendorExtensions.x-group-parameters}}  

    {{#vendorExtensions.x-group-parameters}}
    {{#allParams}}
    {{#required}}
    * @param {{paramName}} {{description}}
    * 
    {{/required}}
    {{/allParams}}
    */
    {{/vendorExtensions.x-group-parameters}}
    {{^vendorExtensions.x-group-parameters}}
    private async {{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
    {{/vendorExtensions.x-group-parameters}}    
    {{#vendorExtensions.x-group-parameters}}
    private async {{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}} ({{#allParams}}{{#required}}{{paramName}}: {{{dataType}}}, {{/required}}{{/allParams}}{{nickname}}QueryParams?:{{#lambda.titlecase}}{{nickname}}QueryParams{{/lambda.titlecase}}, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
    {{/vendorExtensions.x-group-parameters}}  
        const localVarPath = this.basePath + '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
{{#hasProduces}}
        const produces = [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
{{/hasProduces}}
        let localVarFormParams: any = {};

{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
{{/required}}
{{/allParams}}
{{#vendorExtensions.x-group-parameters}}
        if ({{nickname}}QueryParams != undefined){ 
{{/vendorExtensions.x-group-parameters}} 
{{#vendorExtensions.x-group-parameters}}
{{#queryParams}}
            if ({{nickname}}QueryParams.{{paramName}} !== undefined) {
                localVarQueryParameters['{{baseName}}'] = ObjectSerializer.serialize({{nickname}}QueryParams.{{paramName}}, "{{{dataType}}}");
            }
{{/queryParams}}
{{/vendorExtensions.x-group-parameters}} 

{{^vendorExtensions.x-group-parameters}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            localVarQueryParameters['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
        }
{{/queryParams}}
{{/vendorExtensions.x-group-parameters}} 
{{#vendorExtensions.x-group-parameters}}
        }
{{/vendorExtensions.x-group-parameters}} 
{{#headerParams}}
        localVarHeaderParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
{{/headerParams}}
        (<any>Object).assign(localVarHeaderParams, options.headers);
        localVarHeaderParams['Finix-Version'] = "{{version}}";
        {{#consumes}}
        localVarHeaderParams['Content-Type'] = "{{mediaType}}";
        {{/consumes}}
        let localVarUseFormData = false;

{{#formParams}}
        if ({{paramName}} !== undefined) {
            {{#isFile}}
            localVarFormParams['{{baseName}}'] = {{paramName}};
            {{/isFile}}
            {{^isFile}}
            localVarFormParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
            {{/isFile}}
        }
{{#isFile}}
        localVarUseFormData = true;
{{/isFile}}

{{/formParams}}
        let localVarRequestOptions: localVarRequest.Options = {
            method: '{{httpMethod}}',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
{{^isResponseFile}}
            json: true,
{{/isResponseFile}}
{{#isResponseFile}}
            encoding: null,
{{/isResponseFile}}
        };
        {{#bodyParam}}
        if ({{paramName}} && {{paramName}}.hasOwnProperty('file')){
        //if ({{paramName}} != undefined && {{paramName}} != null && {{paramName}}.hasOwnProperty('file')){
            localVarRequestOptions.formData = {{paramName}};
        }
        else{
            localVarRequestOptions.body = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");   
        }
        {{/bodyParam}}
        let authenticationPromise = Promise.resolve();
{{#authMethods}}
    {{#isApiKey}}
        if (this.authentications.{{name}}.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isApiKey}}
    {{#isBasicBasic}}
        if (this.authentications.{{name}}.username && this.authentications.{{name}}.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isBasicBasic}}
    {{#isBasicBearer}}
        if (this.authentications.{{name}}.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isBasicBearer}}
    {{#isOAuth}}
        if (this.authentications.{{name}}.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isOAuth}}
{{/authMethods}}
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            {{#returnType}}
                            body = ObjectSerializer.deserialize(body, "{{{.}}}");
                            {{/returnType}}
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }

    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{^vendorExtensions.x-group-parameters}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    {{/vendorExtensions.x-group-parameters}}  
    {{#vendorExtensions.x-group-parameters}}
    {{#allParams}}
    {{#required}}
     * @param {{paramName}} {{description}}
     *  
    {{/required}}
    {{/allParams}}
     */
    {{/vendorExtensions.x-group-parameters}}
    {{#vendorExtensions.x-returns-list}}
    {{^vendorExtensions.x-group-parameters}}
    public async {{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<finixList<any>> {
    {{/vendorExtensions.x-group-parameters}}    
    {{#vendorExtensions.x-group-parameters}}
    public async {{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}} ({{#allParams}}{{#required}}{{paramName}}: {{{dataType}}}, {{/required}}{{/allParams}}{{nickname}}QueryParams?:{{#lambda.titlecase}}{{nickname}}QueryParams{{/lambda.titlecase}}, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<finixList<any>> {
    {{/vendorExtensions.x-group-parameters}} 
        {{^vendorExtensions.x-group-parameters}}
        const responseObject = await this.{{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{paramName}}, {{/allParams}} options);
        {{/vendorExtensions.x-group-parameters}}
        {{#vendorExtensions.x-group-parameters}}
        const responseObject = await this.{{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{nickname}}QueryParams, options);
        {{/vendorExtensions.x-group-parameters}}
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.{{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}queryParam);
        }
        let dataList = new finixList<any>(nextFetch, !reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        return dataList;
    }
    {{/vendorExtensions.x-returns-list}}
    {{^vendorExtensions.x-returns-list}}
    {{^vendorExtensions.x-group-parameters}}
    public async {{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{{#returnType}}{{.}}{{/returnType}}{{^returnType}}any{{/returnType}}> {
    {{/vendorExtensions.x-group-parameters}}    
    {{#vendorExtensions.x-group-parameters}}
    public async {{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}} ({{#allParams}}{{#required}}{{paramName}}: {{{dataType}}}, {{/required}}{{/allParams}}{{nickname}}QueryParams?:{{#lambda.titlecase}}{{nickname}}QueryParams{{/lambda.titlecase}}, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{{#returnType}}{{.}}{{/returnType}}{{^returnType}}any{{/returnType}}> {
    {{/vendorExtensions.x-group-parameters}} 
        {{^vendorExtensions.x-group-parameters}}
        const responseObject = await this.{{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{paramName}}, {{/allParams}} options);
        {{/vendorExtensions.x-group-parameters}}
        {{#vendorExtensions.x-group-parameters}}
        const responseObject = await this.{{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{nickname}}QueryParams, options);
        {{/vendorExtensions.x-group-parameters}}
        return responseObject.body;
    }
    {{/vendorExtensions.x-returns-list}}

    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{^vendorExtensions.x-group-parameters}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    {{/vendorExtensions.x-group-parameters}}  
    {{#vendorExtensions.x-group-parameters}}
    {{#allParams}}
    {{#required}}
     * @param {{paramName}} {{description}}
     * 
    {{/required}}
    {{/allParams}}
     */
    {{/vendorExtensions.x-group-parameters}}
    {{#vendorExtensions.x-returns-list}}
    {{^vendorExtensions.x-group-parameters}}
    public async {{#vendorExtensions.x-java-method-name}}{{{.}}}Http{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Http{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, body: finixList<any>}> {
    {{/vendorExtensions.x-group-parameters}}    
    {{#vendorExtensions.x-group-parameters}}
    public async {{#vendorExtensions.x-java-method-name}}{{{.}}}Http{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Http{{/vendorExtensions.x-java-method-name}} ({{#allParams}}{{#required}}{{paramName}}: {{{dataType}}}, {{/required}}{{/allParams}}{{nickname}}QueryParams?:{{#lambda.titlecase}}{{nickname}}QueryParams{{/lambda.titlecase}}, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, body: finixList<any>}> {
    {{/vendorExtensions.x-group-parameters}} 
        {{^vendorExtensions.x-group-parameters}}
        const responseObject = await this.{{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{paramName}}, {{/allParams}} options);
        {{/vendorExtensions.x-group-parameters}}
        {{#vendorExtensions.x-group-parameters}}
        const responseObject = await this.{{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{nickname}}QueryParams, options);
        {{/vendorExtensions.x-group-parameters}}
        // Check if response body has nextCursor property or offset property and extract the corresponding fields
        let reachedEnd: Boolean;
        const hasNextCursor: any = responseObject.body?.page?.hasOwnProperty('nextCursor');
        let queryParam: any = hasNextCursor ? { afterCursor: '', limit: 20 } : { offset: '', limit: 20 };

        [queryParam, reachedEnd] = hasNextCursor
        ? this.getCursorQueryParam(responseObject, queryParam) 
        : this.getOffsetQueryParam(responseObject, queryParam);

        const nextFetch = (limit?: number) => {
            queryParam.limit = limit;
            if (reachedEnd){
                throw new RangeError("End of list reached");
            }
            return this.{{#vendorExtensions.x-java-method-name}}{{{.}}}{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}queryParam);
        }
        let dataList = new finixList<any>(nextFetch, reachedEnd);
        dataList = this.embeddedHelper(responseObject, dataList);
        //dataList.hasMore = !reachedEnd;
        return Promise.resolve({response: responseObject.response, body: dataList});
    }
    {{/vendorExtensions.x-returns-list}}
    {{^vendorExtensions.x-returns-list}}
    {{^vendorExtensions.x-group-parameters}}
    public async {{#vendorExtensions.x-java-method-name}}{{{.}}}Http{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Http{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: {headers: {[name: string]: string}} = {headers: {}}) : 
        Promise<{response: http.IncomingMessage, {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}}}> {
    {{/vendorExtensions.x-group-parameters}}    
    {{#vendorExtensions.x-group-parameters}}
    public async {{#vendorExtensions.x-java-method-name}}{{{.}}}Http{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Http{{/vendorExtensions.x-java-method-name}} ({{#allParams}}{{#required}}{{paramName}}: {{{dataType}}}, {{/required}}{{/allParams}}{{nickname}}QueryParams?:{{#lambda.titlecase}}{{nickname}}QueryParams{{/lambda.titlecase}}, options: {headers: {[name: string]: string}} = {headers: {}}) :
        Promise<{response: http.IncomingMessage, {{#returnType}}body: {{{.}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}}}> {
    {{/vendorExtensions.x-group-parameters}} 
        {{^vendorExtensions.x-group-parameters}}
        const responseObject = await this.{{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{paramName}}, {{/allParams}} options);
        {{/vendorExtensions.x-group-parameters}}
        {{#vendorExtensions.x-group-parameters}}
        const responseObject = await this.{{#vendorExtensions.x-java-method-name}}{{{.}}}Helper{{/vendorExtensions.x-java-method-name}}{{^vendorExtensions.x-java-method-name}}{{operationId}}Helper{{/vendorExtensions.x-java-method-name}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{nickname}}QueryParams, options);
        {{/vendorExtensions.x-group-parameters}}
        return responseObject;
    }
    {{/vendorExtensions.x-returns-list}}
{{/operation}}

    /**
     * Extracts page and links fields from response body and assigns as properties to finixList
     */ 
    private embeddedHelper(responseObject: any, dataList: finixList<any>){
        if(responseObject.body.embedded == null || responseObject.body.embedded == undefined){
            dataList.page = responseObject.body.page;
            dataList.links = responseObject.body.links;
            return dataList;
        }
        const embeddedName = Object.getOwnPropertyNames(responseObject.body.embedded)[0];
        let tempList = <finixList<any>> responseObject.body.embedded[embeddedName];
        tempList.forEach(item => {dataList.add(item)});
        dataList.page = responseObject.body.page;
        dataList.links = responseObject.body.links;
        return dataList;
    }

    /**
     * Extracts offset value from response body and determines if end of list has been reached
     */
    private getOffsetQueryParam(responseObject: any, queryParam: any){
        queryParam.offset = responseObject.body.page.offset;
        var endReached: Boolean = false;
        if (responseObject.body.page.offset + responseObject.body.page.limit > responseObject.body.page.count){
            endReached = true;
        }
        return [queryParam, endReached];
    }

    /**
    * Extracts nextCursor value from response body and determines if end of list has been reached
    */
    private getCursorQueryParam(responseObject: any, queryParam: any){
        queryParam.afterCursor = responseObject.body.page.nextCursor;
        var endReached: Boolean = false;
        if (responseObject.body.page.nextCursor == undefined){
            endReached = true;
        }
        return [queryParam, endReached];
    }
}   
{{/operations}}
